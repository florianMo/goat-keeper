{"version":3,"sources":["models/index.ts","components/ActionButton.tsx","components/PlayerButton.tsx","components/ActionGrid.tsx","components/Topbar.tsx","components/Game.tsx","store/slices/gameSlice.ts","components/SetResults.tsx","components/GameList.tsx","components/Home.tsx","components/NewGame.tsx","components/TeamManagement.tsx","routing/routes.tsx","routing/RouteAndSubRoute.tsx","components/App.tsx","serviceWorker.ts","store/store.ts","index.tsx","models/game.ts","models/event.ts"],"names":["ActionButton","props","StyledActionButton","positive","event","type","onClick","className","t","styled","div","lime","red","PlayerButton","StyledPlayerButton","player","name","number","blue","ActionGrid","useState","undefined","eventClicked","setEventClicked","handleActionClicked","StyledActionGrid","GameEventType","SERVICE","RECEPTION","PASS","ATTACK","BLOCK","DIG","ACE","team","map","key","onAddAction","handlePlayerClicked","LeaderCode","Topbar","history","useHistory","StyledTopbar","push","Urls","HOME","placement","title","size","icon","faList","GAME_LIST","faPlusCircle","NEW_GAME","to","pathname","target","faGithub","cyan","gameAdapter","createEntityAdapter","gameInitialState","getInitialState","total","gameSlice","createSlice","initialState","reducers","addGame","state","action","addOne","payload","deleteGame","removeOne","addPlayer","game","_","cloneDeep","team1","players","updateOne","id","changes","deletePlayer","playerProperties","playerKey","split","parseInt","filter","p","incrementTeam1","sets","set","team1Score","events","T1_SCORE_INCREMENT","at","dayjs","format","incrementTeam2","team2Score","T2_SCORE_INCREMENT","decrementTeam1","T1_SCORE_DECREMENT","decrementTeam2","T2_SCORE_DECREMENT","addSet","addEvent","actions","StyledGame","grey","SetResults","StyledSetResults","index","Title","Typography","StyledGameList","StyledHome","NewGame","dispatch","useDispatch","Form","useForm","form","StyledNewGame","xs","span","offset","lg","level","layout","onFinish","uuid","uuidv4","getFieldValue","team2","buildUrl","GAME","parameter","value","Item","label","rules","required","message","validateTrigger","List","fields","add","remove","field","align","fieldKey","placeholder","min","step","length","faTrash","block","faPlus","htmlType","StyledTeamTable","process","TEAM_MANAGEMENT","DEFAULT","routes","path","exact","component","useParams","useSelector","games","entities","setSet","leader","T1","T2","EQ","DATE_FORMAT","Group","onChange","e","buttonStyle","Button","faChevronUp","MAX_SCORE","faChevronDown","MIN_SCORE","colLayout","bordered","itemLayout","dataSource","Object","values","renderItem","faSearch","faChartLine","faFileExport","onConfirm","okText","cancelText","Meta","avatar","isWon","faCheckCircle","faTimesCircle","description","columns","dataIndex","sorter","a","b","localeCompare","render","record","pagination","some","error","resetFields","redirectTo","base","parameters","param","replace","toString","RouteAndSubRoute","route","md","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","reducer","persistConfig","storage","whitelist","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.171b4ebe.chunk.js","sourcesContent":["export * from './event';\nexport * from './game';\nexport * from './player';\nexport * from './team';\n","import { lime, red } from '@ant-design/colors';\nimport React from 'react';\nimport { GameEvent, t } from 'src/models';\nimport styled from 'styled-components';\n\ninterface ActionButtonProps {\n  event: GameEvent;\n  onClick: (event: GameEvent) => void;\n}\n\nexport const ActionButton: React.FC<ActionButtonProps> = (props: ActionButtonProps): JSX.Element => {\n  return (\n    <StyledActionButton\n      positive={props.event.positive}\n      type={props.event.type}\n      onClick={(): void => props.onClick(props.event)}\n    >\n      <div className=\"label\">{t(props.event.type)}</div>\n    </StyledActionButton>\n  );\n};\n\nconst StyledActionButton = styled.div<{ positive: boolean | undefined; type: string }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  padding: 16px;\n  margin: 0px 8px 8px 0px;\n  background-color: ${(props): string => (props.positive ? lime[7] : red[6])};\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n\n  .label {\n    font-size: 24px;\n  }\n`;\n","import { blue } from '@ant-design/colors';\nimport React from 'react';\nimport { Player } from 'src/models/player';\nimport styled from 'styled-components';\n\ninterface PlayerButtonProps {\n  player: Player;\n  onClick: (player: Player) => void;\n}\n\nexport const PlayerButton: React.FC<PlayerButtonProps> = (props: PlayerButtonProps): JSX.Element => {\n  return (\n    <StyledPlayerButton onClick={(): void => props.onClick(props.player)}>\n      <div className=\"label\">{props.player.name}</div>\n      <div className=\"number\">{props.player.number}</div>\n    </StyledPlayerButton>\n  );\n};\n\nconst StyledPlayerButton = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  padding: 16px;\n  margin: 0px 8px 8px 0px;\n  background-color: ${blue[4]};\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n\n  .label {\n    font-size: 24px;\n  }\n\n  .number {\n    font-size: 32px;\n  }\n`;\n","import { blue, lime, red } from '@ant-design/colors';\nimport React, { useState } from 'react';\nimport { ActionButton } from 'src/components/ActionButton';\nimport { PlayerButton } from 'src/components/PlayerButton';\nimport { GameEvent, GameEventType, Player } from 'src/models';\nimport styled from 'styled-components';\n\ninterface ActionGridProps {\n  team: Player[];\n  onAddAction: (event: GameEvent) => void;\n}\n\nexport const ActionGrid: React.FC<ActionGridProps> = (props: ActionGridProps): JSX.Element => {\n  const [eventClicked, setEventClicked]: [GameEvent | undefined, any] = useState(undefined);\n\n  const handleActionClicked = (event: GameEvent): void => {\n    setEventClicked(event);\n  };\n\n  const handlePlayerClicked = (player: Player): void => {\n    props.onAddAction({ ...(eventClicked as any), player });\n    setEventClicked(undefined);\n  };\n\n  return (\n    <StyledActionGrid>\n      {!eventClicked && (\n        <>\n          <div className=\"topline\">\n            <span>Que s&apos;est-il passé ?</span>\n          </div>\n          <div className=\"side success\">\n            <ActionButton\n              event={{ type: GameEventType.SERVICE, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n            <ActionButton\n              event={{ type: GameEventType.RECEPTION, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n            <ActionButton\n              event={{ type: GameEventType.PASS, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n            <ActionButton\n              event={{ type: GameEventType.ATTACK, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n            <ActionButton\n              event={{ type: GameEventType.BLOCK, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n            <ActionButton\n              event={{ type: GameEventType.DIG, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n            <ActionButton\n              event={{ type: GameEventType.ACE, positive: true }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n          </div>\n          <div className=\"side failure\">\n            <ActionButton\n              event={{ type: GameEventType.SERVICE, positive: false }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n\n            <ActionButton\n              event={{ type: GameEventType.RECEPTION, positive: false }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n\n            <ActionButton\n              event={{ type: GameEventType.PASS, positive: false }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n\n            <ActionButton\n              event={{ type: GameEventType.ATTACK, positive: false }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n\n            <ActionButton\n              event={{ type: GameEventType.BLOCK, positive: false }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n\n            <ActionButton\n              event={{ type: GameEventType.DIG, positive: false }}\n              onClick={(event): void => handleActionClicked(event)}\n            />\n          </div>\n        </>\n      )}\n\n      {eventClicked && (\n        <>\n          <div className=\"topline\">\n            <span>\n              Qui a {eventClicked.positive ? 'brillamment réussi' : '(encore) totalement foiré'} son geste (\n              <button className=\"link\" onClick={(): void => setEventClicked(undefined)}>\n                annuler\n              </button>\n              ) ?\n            </span>\n          </div>\n          <div className=\"players\">\n            {props.team.map((player) => (\n              <PlayerButton\n                key={player.name + ':' + player.number}\n                player={player}\n                onClick={(player): void => handlePlayerClicked(player)}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </StyledActionGrid>\n  );\n};\n\nconst StyledActionGrid = styled.div`\n  .topline {\n    width: 100%;\n    display: flex;\n    font-weight: bold;\n    justify-content: center;\n\n    span {\n      font-size: 20px;\n    }\n\n    button.link {\n      font-weight: 700;\n    }\n  }\n\n  .side,\n  .players {\n    padding: 16px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin-bottom: 16px;\n  }\n\n  .side {\n    &.success {\n      background-color: ${lime[1]};\n      border: 2px solid ${lime[3]};\n    }\n\n    &.failure {\n      background-color: ${red[1]};\n      border: 2px solid ${red[3]};\n    }\n  }\n\n  .players {\n    background-color: ${blue[1]};\n    border: 2px solid ${blue[3]};\n  }\n`;\n","import { cyan } from '@ant-design/colors';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faList, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Tooltip } from 'antd';\nimport React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Urls } from 'src/routing';\nimport styled from 'styled-components';\n\nexport const Topbar = (): JSX.Element => {\n  const history = useHistory();\n\n  return (\n    <StyledTopbar>\n      <span className=\"brand\" onClick={(): void => history.push(Urls.HOME)}>\n        Goat keeper\n      </span>\n      <div className=\"actions\">\n        <Tooltip placement=\"left\" title=\"matchs précédents\">\n          <FontAwesomeIcon size=\"lg\" icon={faList} onClick={(): void => history.push(Urls.GAME_LIST)} />\n        </Tooltip>\n        <Tooltip placement=\"left\" title=\"nouveau match\">\n          <FontAwesomeIcon size=\"lg\" icon={faPlusCircle} onClick={(): void => history.push(Urls.NEW_GAME)} />\n        </Tooltip>\n        <Link to={{ pathname: 'https://github.com/florianMo/goat-keeper' }} target=\"_blank\">\n          <FontAwesomeIcon size=\"lg\" icon={faGithub} />\n        </Link>\n      </div>\n    </StyledTopbar>\n  );\n};\n\nconst StyledTopbar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 80px;\n  background: linear-gradient(to right, ${cyan[9]}, ${cyan[6]});\n  margin-bottom: 16px;\n\n  > span {\n    color: white;\n  }\n\n  .brand {\n    display: flex;\n    align-items: center;\n    font-family: 'Pacifico';\n    margin-left: 24px;\n    font-size: 30px;\n    cursor: pointer;\n\n    img {\n      width: 30px;\n      margin-left: 15px;\n    }\n  }\n\n  .actions svg {\n    color: white;\n    margin-right: 24px;\n    cursor: pointer;\n    transition: 0.3s ease-in-out;\n\n    &:hover {\n      color: ${cyan[8]};\n    }\n  }\n`;\n","import { blue, cyan, grey, lime, red } from '@ant-design/colors';\nimport { faChevronDown, faChevronUp, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Radio, Row } from 'antd';\nimport dayjs from 'dayjs';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { ActionGrid } from 'src/components/ActionGrid';\nimport { Topbar } from 'src/components/Topbar';\nimport { GameEvent } from 'src/models/event';\nimport { DATE_FORMAT, MAX_SCORE, MIN_SCORE } from 'src/models/game';\nimport { buildUrl, Urls } from 'src/routing';\nimport {\n  addEvent,\n  addSet,\n  decrementTeam1,\n  decrementTeam2,\n  incrementTeam1,\n  incrementTeam2,\n} from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nimport { colLayout } from './App';\n\nenum LeaderCode {\n  EQ = 'EQ',\n  T1 = 'T1',\n  T2 = 'T2',\n}\n\nexport const Game = (): JSX.Element => {\n  const { id } = useParams();\n  const history = useHistory();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n  const dispatch = useDispatch();\n  const [set, setSet] = useState(game ? game.sets.length - 1 : 0);\n\n  const leader: LeaderCode =\n    game.sets[set].team1Score > game.sets[set].team2Score\n      ? LeaderCode.T1\n      : game.sets[set].team1Score < game.sets[set].team2Score\n      ? LeaderCode.T2\n      : LeaderCode.EQ;\n\n  const handleIncrementT1 = (): void => {\n    if (game.sets[set].team1Score < MAX_SCORE) {\n      dispatch(incrementTeam1({ game, set }));\n    }\n  };\n\n  const handleIncrementT2 = (): void => {\n    if (game.sets[set].team2Score < MAX_SCORE) {\n      dispatch(incrementTeam2({ game, set }));\n    }\n  };\n\n  const handleDecrementT1 = (): void => {\n    if (game.sets[set].team1Score > MIN_SCORE) {\n      dispatch(decrementTeam1({ game, set }));\n    }\n  };\n\n  const handleDecrementT2 = (): void => {\n    if (game.sets[set].team2Score > MIN_SCORE) {\n      dispatch(decrementTeam2({ game, set }));\n    }\n  };\n\n  const handleAddAction = (event: GameEvent): void => {\n    const value = { game, set, event } as any;\n    dispatch(addEvent(value));\n  };\n\n  return (\n    <>\n      <Topbar />\n\n      {game && (\n        <StyledGame>\n          <Row>\n            <Col className=\"date\">{dayjs(game.at).format(DATE_FORMAT)}</Col>\n            <Col className=\"setSelector\">\n              <Radio.Group onChange={(e): void => setSet(e.target.value)} value={set} buttonStyle=\"solid\" size=\"large\">\n                {game.sets.map((set, index) => (\n                  <Radio.Button key={index} value={index}>\n                    {set.team1Score}•{set.team2Score}\n                  </Radio.Button>\n                ))}\n              </Radio.Group>\n\n              {game.sets.length < 5 && (\n                <Button type=\"primary\" onClick={(): any => dispatch(addSet(game))} size=\"large\">\n                  <FontAwesomeIcon icon={faPlus} />\n                </Button>\n              )}\n            </Col>\n            <Col className=\"team-names\">\n              <span>{game.team1.name}</span>\n              <span>{game.team2.name}</span>\n            </Col>\n            <Col className=\"header\">\n              <div className=\"side left\">\n                <span className={`score t1 leader${leader}`}>{game.sets[set].team1Score}</span>\n                <div className=\"score-controls\">\n                  <FontAwesomeIcon icon={faChevronUp} size=\"lg\" onClick={handleIncrementT1} />\n                  <FontAwesomeIcon icon={faChevronDown} size=\"lg\" onClick={handleDecrementT1} />\n                </div>\n              </div>\n              <div className=\"side right\">\n                <div className=\"score-controls\">\n                  <FontAwesomeIcon icon={faChevronUp} size=\"lg\" onClick={handleIncrementT2} />\n                  <FontAwesomeIcon icon={faChevronDown} size=\"lg\" onClick={handleDecrementT2} />\n                </div>\n                <span className={`score t2 leader${leader}`}>{game.sets[set].team2Score}</span>\n              </div>\n            </Col>\n            <Col className=\"actions\" {...colLayout}>\n              <button\n                className=\"link team\"\n                onClick={(): void =>\n                  history.push(buildUrl(Urls.TEAM_MANAGEMENT, [{ parameter: 'id', value: game.id }]))\n                }\n              >\n                Gérer mon équipe\n              </button>\n              <ActionGrid team={game.team1.players} onAddAction={handleAddAction} />\n            </Col>\n          </Row>\n        </StyledGame>\n      )}\n    </>\n  );\n};\n\nconst StyledGame = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n\n  .date {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    font-size: 24px;\n  }\n\n  .setSelector {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    margin: 12px 0px;\n\n    .ant-radio-button-wrapper {\n      width: 48px;\n      padding: 0px 2px;\n      text-align: center;\n    }\n\n    button {\n      margin-left: 8px;\n    }\n  }\n\n  .team-names {\n    display: flex;\n    width: 100%;\n\n    span {\n      font-size: 40px;\n      flex: 0 0 50%;\n      padding: 0 8px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      color: ${grey[5]};\n\n      &:nth-child(1) {\n        text-align: right;\n      }\n    }\n  }\n\n  .header {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n\n    .side {\n      display: flex;\n      align-items: center;\n      user-select: none;\n\n      svg {\n        transition: 0.3s all;\n        color: ${cyan[8]};\n\n        &:hover {\n          color: ${cyan[6]};\n        }\n      }\n\n      .score {\n        width: 80px;\n        text-align: center;\n        font-size: 44px;\n        font-weight: 700;\n        padding: 4px;\n        margin: 4px;\n        background-color: ${blue[4]};\n        color: white;\n        border-radius: 4px;\n\n        &.t1.leaderT1,\n        &.t2.leaderT2 {\n          background-color: ${lime[7]};\n        }\n\n        &.t1.leaderT2,\n        &.t2.leaderT1 {\n          background-color: ${red[6]};\n        }\n      }\n\n      .score-controls {\n        width: 40px;\n        padding: 4px;\n        display: flex;\n        flex-direction: column;\n        background-color: ${cyan[8]};\n\n        svg {\n          color: white;\n          margin: 8px;\n          cursor: pointer;\n          transition: 0.3s all;\n\n          &:hover {\n            color: ${cyan[7]};\n          }\n        }\n      }\n\n      &.left {\n        margin-right: 2px;\n\n        .score {\n          margin-right: 0px;\n          border-top-right-radius: 0px;\n          border-bottom-right-radius: 0px;\n        }\n\n        .score-controls {\n          border-top-right-radius: 4px;\n          border-bottom-right-radius: 4px;\n        }\n      }\n\n      &.right {\n        margin-left: 2px;\n\n        .score {\n          margin-left: 0px;\n          border-top-left-radius: 0px;\n          border-bottom-left-radius: 0px;\n        }\n\n        .score-controls {\n          border-top-left-radius: 4px;\n          border-bottom-left-radius: 4px;\n        }\n      }\n    }\n  }\n\n  .actions button.team {\n    display: block;\n    margin: auto;\n    margin-top: 8px;\n    margin-bottom: 8px;\n  }\n`;\n","import { createEntityAdapter, createSlice, EntityState, PayloadAction } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { Game } from 'src/models';\nimport { GameEvent, GameEventType } from 'src/models/event';\nimport { Player } from 'src/models/player';\n\nexport const gameAdapter = createEntityAdapter<Game>();\n\nexport interface GameState extends EntityState<Game> {\n  total: number;\n}\n\nexport const gameInitialState: GameState = {\n  ...gameAdapter.getInitialState(),\n  total: 0,\n};\n\nexport const gameSlice = createSlice({\n  name: 'games',\n  initialState: gameInitialState,\n  reducers: {\n    addGame: (state: GameState, action: PayloadAction<Game>): void => {\n      gameAdapter.addOne(state, action.payload);\n    },\n    deleteGame: (state: GameState, action: PayloadAction<string>): void => {\n      gameAdapter.removeOne(state, action.payload);\n    },\n    addPlayer: (state: GameState, action: PayloadAction<{ game: Game; player: Player }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.team1.players.push(action.payload.player);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    deletePlayer: (state: GameState, action: PayloadAction<{ game: Game; playerKey: string }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      const playerProperties = action.payload.playerKey.split(':');\n      const player: Player = { name: playerProperties[0], number: parseInt(playerProperties[1], 10) };\n      game.team1.players = game.team1.players.filter((p) => player.name !== p.name && player.number !== p.number);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    incrementTeam1: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team1Score++;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T1_SCORE_INCREMENT,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    incrementTeam2: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team2Score++;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T2_SCORE_INCREMENT,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    decrementTeam1: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team1Score--;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T1_SCORE_DECREMENT,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    decrementTeam2: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team2Score--;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T2_SCORE_DECREMENT,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    addSet: (state: GameState, action: PayloadAction<Game>): void => {\n      const game = _.cloneDeep(action.payload);\n      game.sets.push({ team1Score: 0, team2Score: 0, events: [], at: dayjs().format() });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    addEvent: (state: GameState, action: PayloadAction<{ game: Game; set: number; event: GameEvent }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].events.push(action.payload.event);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n  },\n});\n\nexport const {\n  addEvent,\n  addGame,\n  addPlayer,\n  addSet,\n  decrementTeam1,\n  decrementTeam2,\n  deleteGame,\n  deletePlayer,\n  incrementTeam1,\n  incrementTeam2,\n} = gameSlice.actions;\n","import { blue, lime, red } from '@ant-design/colors';\nimport React from 'react';\nimport { Game } from 'src/models/game';\nimport styled from 'styled-components';\n\ninterface SetResultProps {\n  game: Game;\n}\n\nexport const SetResults: React.FC<SetResultProps> = (props: SetResultProps): JSX.Element => {\n  return (\n    <StyledSetResults>\n      {props.game.sets.map((set, index) => (\n        <span\n          key={index}\n          className={set.team1Score > set.team2Score ? 'won' : set.team1Score < set.team2Score ? 'lost' : ''}\n        >\n          {set.team1Score}•{set.team2Score}\n        </span>\n      ))}\n    </StyledSetResults>\n  );\n};\n\nconst StyledSetResults = styled.div`\n  display: flex;\n\n  span {\n    padding: 2px 4px;\n    margin-left: 4px;\n    border-radius: 4px;\n    text-align: center;\n    color: white;\n    font-weight: 700;\n    background-color: ${blue[4]};\n\n    &.won {\n      background-color: ${lime[7]};\n    }\n\n    &.lost {\n      background-color: ${red[6]};\n    }\n  }\n`;\n","import { cyan, lime, red } from '@ant-design/colors';\nimport {\n  faChartLine,\n  faCheckCircle,\n  faFileExport,\n  faSearch,\n  faTimesCircle,\n  faTrash,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, List, Popconfirm, Row, Tooltip, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { SetResults } from 'src/components/SetResults';\nimport { Topbar } from 'src/components/Topbar';\nimport { DATE_FORMAT, isWon } from 'src/models/game';\nimport { buildUrl, Urls } from 'src/routing';\nimport { deleteGame } from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nimport { colLayout } from './App';\n\nconst { Title } = Typography;\n\nexport const GameList = (): JSX.Element => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const games = useSelector((state: RootState) => state.games.entities);\n\n  return (\n    <>\n      <Topbar />\n\n      <StyledGameList>\n        <Row>\n          <Col {...colLayout}>\n            <Title level={2}>Matchs enregistrés sur ce navigateur</Title>\n            <List\n              bordered\n              itemLayout=\"horizontal\"\n              size=\"large\"\n              dataSource={Object.values(games).map((game) => game)}\n              renderItem={(game): JSX.Element => (\n                <List.Item\n                  actions={[\n                    <Tooltip key=\"view\" title=\"editer le score et les stats\">\n                      <FontAwesomeIcon\n                        icon={faSearch}\n                        size=\"lg\"\n                        onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n                      />\n                    </Tooltip>,\n                    <Tooltip key=\"stats\" title=\"visualiser les données du match\">\n                      <FontAwesomeIcon\n                        icon={faChartLine}\n                        size=\"lg\"\n                        onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n                      />\n                    </Tooltip>,\n                    <Tooltip key=\"export\" title=\"exporter les données du match\">\n                      <FontAwesomeIcon\n                        icon={faFileExport}\n                        size=\"lg\"\n                        onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n                      />\n                    </Tooltip>,\n                    <Tooltip key=\"delete\" title=\"supprimer le match\">\n                      <Popconfirm\n                        title={'sûr ?'}\n                        onConfirm={(): any => dispatch(deleteGame(game.id))}\n                        okText=\"Oui\"\n                        cancelText=\"Non en fait\"\n                      >\n                        <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n                      </Popconfirm>\n                    </Tooltip>,\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={<FontAwesomeIcon size=\"3x\" icon={isWon(game) ? faCheckCircle : faTimesCircle} />}\n                    title={game.team1.name + ' vs ' + game.team2.name + ', le ' + dayjs(game.at).format(DATE_FORMAT)}\n                    description={<SetResults game={game} />}\n                  />\n                </List.Item>\n              )}\n            />\n          </Col>\n\n          <Col className=\"button\" {...colLayout}>\n            <Button size=\"large\" type=\"primary\" block onClick={(): void => history.push(Urls.NEW_GAME)}>\n              Nouveau match\n            </Button>\n          </Col>\n        </Row>\n      </StyledGameList>\n    </>\n  );\n};\n\nconst StyledGameList = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n\n  .ant-list-item-meta-title {\n    font-size: 18px;\n    font-weight: 700;\n  }\n\n  .ant-list-item-meta-description {\n    font-size: 16px;\n  }\n\n  svg[data-icon='check-circle'] {\n    color: ${lime[7]};\n  }\n\n  svg[data-icon='times-circle'] {\n    color: ${red[6]};\n  }\n\n  .button {\n    margin-top: 16px;\n\n    button {\n      height: 56px;\n    }\n\n    span {\n      font-weight: bold;\n      font-size: 24px;\n    }\n  }\n\n  .ant-list-item-action {\n    svg {\n      transition: 0.3s all;\n\n      &:hover {\n        color: ${cyan[8]};\n      }\n\n      &[data-icon='trash']:hover {\n      color: ${red[5]};\n    }\n  }\n`;\n","import { Button, Col, Row } from 'antd';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { Urls } from 'src/routing';\nimport styled from 'styled-components';\n\nexport const Home = (): JSX.Element => {\n  const history = useHistory();\n\n  return (\n    <>\n      <Topbar />\n      <StyledHome>\n        <Row>\n          <Col xs={{ span: 20, offset: 2 }} lg={{ span: 12, offset: 6 }}>\n            <Button block size=\"large\" type=\"primary\" onClick={(): void => history.push(Urls.NEW_GAME)}>\n              Nouveau match\n            </Button>\n            <Button block size=\"large\" type=\"primary\" onClick={(): void => history.push(Urls.GAME_LIST)}>\n              Matchs enregistrés sur cette machine\n            </Button>\n          </Col>\n        </Row>\n      </StyledHome>\n    </>\n  );\n};\n\nconst StyledHome = styled.div`\n  height: calc(100vh - 80px);\n\n  button {\n    font-size: 24px;\n    margin-top: 24px;\n    font-weight: bold;\n    height: 100px;\n  }\n`;\n","import { red } from '@ant-design/colors';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Form, Input, InputNumber, Row, Space, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { GameSet } from 'src/models/game';\nimport { Team } from 'src/models/team';\nimport { buildUrl, Urls } from 'src/routing';\nimport { addGame } from 'src/store/slices/gameSlice';\nimport styled from 'styled-components';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst { Title } = Typography;\n\nexport const NewGame = (): JSX.Element => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const handleSubmit = (): void => {\n    const uuid = uuidv4();\n\n    let players = form.getFieldValue('players');\n    if (!players) {\n      players = [{ name: 'Tous', number: 0 }];\n    }\n\n    const team1: Team = {\n      name: form.getFieldValue('team1'),\n      players: players,\n    };\n\n    const team2: Team = {\n      name: form.getFieldValue('team2'),\n      players: [],\n    };\n\n    const sets: GameSet[] = [\n      {\n        team1Score: 0,\n        team2Score: 0,\n        events: [],\n        at: dayjs().format(),\n      },\n    ];\n\n    dispatch(addGame({ id: uuid, team1: team1, team2: team2, sets: sets, at: dayjs().format() }));\n    history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: uuid }]));\n  };\n\n  return (\n    <>\n      <Topbar />\n      <StyledNewGame>\n        <Row>\n          <Col xs={{ span: 20, offset: 2 }} lg={{ span: 8, offset: 8 }}>\n            <Title level={2}>Nouveau match</Title>\n            <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n              <Form.Item\n                name=\"team1\"\n                label=\"Ton équipe\"\n                rules={[{ required: true, message: 'requis' }]}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"team2\"\n                label=\"L'autre équipe\"\n                rules={[{ required: true, message: 'requis' }]}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.List name=\"players\">\n                {(fields, { add, remove }): JSX.Element => {\n                  return (\n                    <div>\n                      {fields.map((field) => (\n                        <Space key={field.key} align=\"start\">\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'name']}\n                            fieldKey={[field.fieldKey, 'name']}\n                            rules={[{ required: true, message: 'requis' }]}\n                            label=\"Nom\"\n                          >\n                            <Input placeholder=\"nom du joueur\" size=\"large\" />\n                          </Form.Item>\n\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'number']}\n                            fieldKey={[field.fieldKey, 'number']}\n                            rules={[{ required: true, message: 'requis' }]}\n                            label=\"Numéro\"\n                          >\n                            <InputNumber min={0} step=\"1\" size=\"large\" />\n                          </Form.Item>\n\n                          {fields.length > 1 ? (\n                            <FontAwesomeIcon\n                              icon={faTrash}\n                              size=\"lg\"\n                              className=\"dynamic-delete-button\"\n                              onClick={(): void => remove(field.name)}\n                            />\n                          ) : null}\n                        </Space>\n                      ))}\n\n                      <Form.Item className=\"add-player\">\n                        <Button\n                          block\n                          type=\"dashed\"\n                          onClick={(): void => {\n                            add();\n                          }}\n                          size=\"large\"\n                        >\n                          <FontAwesomeIcon icon={faPlus} /> Ajouter un joueur\n                        </Button>\n                      </Form.Item>\n                    </div>\n                  );\n                }}\n              </Form.List>\n\n              <Form.Item>\n                <Button block type=\"primary\" htmlType=\"submit\" size=\"large\">\n                  OK\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </StyledNewGame>\n    </>\n  );\n};\n\nconst StyledNewGame = styled.div`\n  height: calc(100vh - 80px);\n  margin-top: 24px;\n\n  .ant-space {\n    display: flex;\n    width: 100%;\n\n    .ant-space-item:nth-child(1) {\n      width: 50%;\n    }\n\n    svg.fa-trash {\n      margin-top: 42px;\n      margin-left: 8px;\n      cursor: pointer;\n\n      &:hover {\n        color: ${red[6]};\n      }\n    }\n  }\n\n  .add-player svg.fa-plus {\n    margin-right: 8px;\n  }\n`;\n\nexport default NewGame;\n","/* eslint-disable react/display-name */\nimport { cyan, red } from '@ant-design/colors';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Form, Input, InputNumber, message, Popconfirm, Row, Table, Tooltip, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { Game } from 'src/models/game';\nimport { Player } from 'src/models/player';\nimport { buildUrl, Urls } from 'src/routing';\nimport { addPlayer, deletePlayer } from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nimport { colLayout } from './App';\n\nconst { Title } = Typography;\n\ninterface TeamManagementProps {\n  game: Game;\n}\n\nexport const TeamManagement: React.FC<TeamManagementProps> = (): JSX.Element => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n  const [form] = Form.useForm();\n\n  const columns = [\n    { title: 'Nom', dataIndex: 'name', sorter: (a: Player, b: Player): number => a.name.localeCompare(b.name) },\n    { title: 'Numéro', dataIndex: 'number', sorter: (a: Player, b: Player): number => a.number - b.number },\n    {\n      title: '',\n      dataIndex: '',\n      key: 'actions',\n      className: 'actions fit-content',\n      render: (record: any): JSX.Element => (\n        <Tooltip key=\"delete\" title=\"supprimer cette personne\">\n          <Popconfirm\n            title={'sûr ?'}\n            onConfirm={(): any => dispatch(deletePlayer({ game: game, playerKey: record.key }))}\n            okText=\"Oui\"\n            cancelText=\"Non en fait\"\n          >\n            <FontAwesomeIcon icon={faTrash} />\n          </Popconfirm>\n        </Tooltip>\n      ),\n    },\n  ];\n\n  const handleAddPlayer = (player: Player): void => {\n    if (game.team1.players.some((p) => p.name === player.name && p.number === player.number)) {\n      message.error('Cette personne existe déjà');\n    } else {\n      dispatch(addPlayer({ game: game, player: player }));\n      form.resetFields();\n    }\n  };\n\n  return (\n    <>\n      <Topbar />\n\n      {game && (\n        <StyledTeamTable>\n          <Row>\n            <Col {...colLayout}>\n              <Title level={2}>Gérer mon équipe</Title>\n              <button\n                className=\"link\"\n                onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n              >\n                Retour au match\n              </button>\n\n              <Table\n                size=\"small\"\n                bordered={true}\n                dataSource={game.team1.players.map((player) => {\n                  return { ...player, key: player.name + ':' + player.number };\n                })}\n                columns={columns}\n                pagination={false}\n              ></Table>\n\n              <Form form={form} layout=\"horizontal\" onFinish={handleAddPlayer}>\n                <Form.Item\n                  name=\"name\"\n                  label=\"Nom\"\n                  rules={[{ required: true, message: 'requis' }]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input placeholder=\"nouveau joueur\" />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"number\"\n                  label=\"Numéro\"\n                  rules={[{ required: true, message: 'requis' }]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <InputNumber />\n                </Form.Item>\n\n                <Form.Item className=\"button\">\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    OK\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Col>\n          </Row>\n        </StyledTeamTable>\n      )}\n    </>\n  );\n};\n\nconst StyledTeamTable = styled.div`\n  button.link {\n    margin-bottom: 16px;\n  }\n\n  form {\n    margin-top: 24px;\n    margin-bottom: 24px;\n  }\n\n  .fit-content {\n    width: 1%;\n    white-space: nowrap;\n  }\n\n  .actions {\n    svg {\n      transition: 0.3s all;\n      cursor: pointer;\n\n      &:hover {\n        color: ${cyan[8]};\n      }\n\n      &[data-icon='trash']:hover {\n      color: ${red[5]};\n    }\n  }\n\n  .button .ant-form-item-control-input-content {\n    text-align: right;\n  }\n`;\n","import { Game } from 'src/components/Game';\nimport { GameList } from 'src/components/GameList';\nimport { Home } from 'src/components/Home';\nimport { NewGame } from 'src/components/NewGame';\nimport { TeamManagement } from 'src/components/TeamManagement';\n\nexport interface RouteConfig {\n  path: string;\n  exact?: boolean;\n  component?: any;\n  redirectTo?: string;\n  routes?: RouteConfig[];\n}\n\nexport interface MenuElement {\n  path?: string;\n  textKey?: string;\n  icon?: JSX.Element;\n  weight?: number;\n  children?: MenuElement[];\n}\n\nexport const Urls = {\n  HOME: process.env.PUBLIC_URL + '/home',\n  NEW_GAME: process.env.PUBLIC_URL + '/new-game',\n  GAME_LIST: process.env.PUBLIC_URL + '/game-list',\n  GAME: process.env.PUBLIC_URL + '/game/:id',\n  TEAM_MANAGEMENT: process.env.PUBLIC_URL + '/game/:id/team',\n  DEFAULT: process.env.PUBLIC_URL + '/:anything_else',\n};\n\nexport const routes: RouteConfig[] = [\n  {\n    path: Urls.HOME,\n    exact: true,\n    component: Home,\n  },\n  {\n    path: Urls.NEW_GAME,\n    exact: true,\n    component: NewGame,\n  },\n  {\n    path: Urls.GAME,\n    exact: true,\n    component: Game,\n  },\n  {\n    path: Urls.GAME_LIST,\n    exact: true,\n    component: GameList,\n  },\n  {\n    path: Urls.TEAM_MANAGEMENT,\n    exact: true,\n    component: TeamManagement,\n  },\n  {\n    path: Urls.DEFAULT,\n    redirectTo: Urls.HOME,\n  },\n  {\n    path: '',\n    exact: true,\n    redirectTo: Urls.HOME,\n  },\n];\n\ninterface UrlParameter {\n  parameter: string;\n  value: any;\n}\n\nexport const buildUrl = (base: string, parameters: UrlParameter[]): string => {\n  parameters.map((param: UrlParameter) => {\n    base = base.replace(':' + param.parameter, param.value.toString());\n    return null;\n  });\n\n  return base;\n};\n","import React from 'react';\nimport { Redirect, Route, SwitchProps } from 'react-router-dom';\nimport { RouteConfig } from 'src/routing';\n\nexport const RouteAndSubRoute: React.FC<SwitchProps & RouteConfig> = (route) => {\n  if (route.redirectTo) {\n    return <Route path={route.path} render={(): any => <Redirect to={route.redirectTo as string} />} />;\n  }\n\n  return <Route path={route.path} render={(props: any): any => <route.component {...props} routes={route.routes} />} />;\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { RouteAndSubRoute, routes } from 'src/routing';\n\nexport const colLayout = { xs: { span: 22, offset: 1 }, md: { span: 18, offset: 3 }, lg: { span: 16, offset: 4 } };\n\nexport const App = (): JSX.Element => {\n  return (\n    <Router>\n      <Switch>\n        {routes.map((route, index) => (\n          <RouteAndSubRoute key={index} {...route} />\n        ))}\n      </Switch>\n    </Router>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport storage from 'redux-persist/lib/storage';\n\nimport { gameSlice } from './slices/gameSlice';\n\nconst rootReducer = combineReducers({ games: gameSlice.reducer });\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst persistConfig = {\n  key: 'gkState',\n  storage: storage,\n  whitelist: ['games'],\n  stateReconciler: autoMergeLevel2,\n};\n\nconst pReducer = persistReducer<RootState>(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: pReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n","import './styles/reset.css';\nimport 'antd/dist/antd.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport { App } from 'src/components/App';\nimport * as serviceWorker from 'src/serviceWorker';\nimport { persistor, store } from 'src/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { GameEvent } from './event';\nimport { Team } from './team';\n\nexport interface Game {\n  id: string;\n  team1: Team;\n  team2: Team;\n  sets: GameSet[];\n  at: string;\n}\n\nexport interface GameSet {\n  team1Score: number;\n  team2Score: number;\n  events: GameEvent[];\n  at: string;\n}\n\nexport const isWon = (game: Game): boolean => {\n  return (\n    game.sets.filter((set) => set.team1Score > set.team2Score).length >\n    game.sets.filter((set) => set.team1Score < set.team2Score).length\n  );\n};\n\nexport const DATE_FORMAT = 'DD/MM/YYYY';\nexport const MAX_SCORE = 99;\nexport const MIN_SCORE = 0;\n","import { Player } from './player';\n\nexport interface GameEvent {\n  type: GameEventType;\n  positive?: boolean;\n  player?: Player;\n  at?: string;\n}\n\nexport enum GameEventType {\n  SERVICE = 'SERVICE',\n  RECEPTION = 'RECEPTION',\n  PASS = 'PASS',\n  ATTACK = 'ATTACK',\n  BLOCK = 'BLOCK',\n  DIG = 'DIG',\n  ACE = 'ACE',\n  T1_SCORE_INCREMENT = 'T1_SCORE_INCREMENT',\n  T1_SCORE_DECREMENT = 'T1_SCORE_DECREMENT',\n  T2_SCORE_INCREMENT = 'T2_SCORE_INCREMENT',\n  T2_SCORE_DECREMENT = 'T2_SCORE_DECREMENT',\n}\n\nexport const t = (type: GameEventType): string => {\n  switch (type) {\n    case GameEventType.ACE:\n      return 'Ace';\n    case GameEventType.ATTACK:\n      return 'Attaque';\n    case GameEventType.BLOCK:\n      return 'Block';\n    case GameEventType.DIG:\n      return 'Défense';\n    case GameEventType.PASS:\n      return 'Passe';\n    case GameEventType.RECEPTION:\n      return 'Réception';\n    case GameEventType.SERVICE:\n      return 'Service';\n  }\n\n  return type;\n};\n"],"sourceRoot":""}