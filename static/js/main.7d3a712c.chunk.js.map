{"version":3,"sources":["assets/images/volleyball.png","models/event.ts","RouteAndSubRoute.tsx","components/ActionButton.tsx","components/PlayerButton.tsx","components/ActionGrid.tsx","components/Topbar.tsx","models/game.ts","store/slices/gameSlice.ts","components/Game.tsx","components/SetResults.tsx","components/GameList.tsx","components/Home.tsx","components/NewGame.tsx","components/TeamManagement.tsx","routes.tsx","components/App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["module","exports","GameEventType","RouteAndSubRoute","route","redirectTo","path","render","to","props","component","routes","ActionButton","StyledActionButton","positive","event","type","onClick","className","ACE","ATTACK","BLOCK","DIG","PASS","RECEPTION","SERVICE","t","size","icon","faThumbsUp","faThumbsDown","styled","div","lime","red","PlayerButton","StyledPlayerButton","player","name","number","gold","ActionGrid","useState","undefined","eventClicked","setEventClicked","handleActionClicked","StyledActionGrid","team","map","key","onAddAction","handlePlayerClicked","Topbar","history","useHistory","StyledTopbar","push","Urls","HOME","alt","src","volleyball","placement","title","faList","GAME_LIST","faPlusCircle","NEW_GAME","cyan","isWon","game","sets","filter","set","team1Score","team2Score","length","gameAdapter","createEntityAdapter","gameInitialState","getInitialState","total","gameSlice","createSlice","initialState","reducers","addGame","state","action","addOne","payload","deleteGame","removeOne","addPlayer","_","cloneDeep","team1","players","updateOne","id","changes","deletePlayer","playerProperties","playerKey","split","parseInt","p","incrementTeam1","events","T1_SCORE_INCREMENT","at","dayjs","format","incrementTeam2","T2_SCORE_INCREMENT","decrementTeam1","T1_SCORE_DECREMENT","decrementTeam2","T2_SCORE_DECREMENT","addSet","addEvent","actions","LeaderCode","Title","Typography","StyledGame","grey","blue","Game","useParams","useSelector","games","entities","dispatch","useDispatch","setSet","leader","EQ","T1","T2","Group","onChange","e","target","value","buttonStyle","index","Button","faPlus","faMinusCircle","level","team2","xs","span","offset","lg","buildUrl","TEAM_MANAGEMENT","parameter","SetResults","StyledSetResults","StyledGameList","GameList","bordered","itemLayout","dataSource","Object","values","renderItem","Item","faSearch","GAME","faChartLine","faFileExport","onConfirm","okText","cancelText","faTrash","Meta","avatar","faCheckCircle","faTimesCircle","description","block","StyledHome","Home","StyledNewGame","NewGame","Form","useForm","form","layout","onFinish","uuid","uuidv4","getFieldValue","label","rules","required","message","validateTrigger","List","fields","add","remove","field","align","fieldKey","placeholder","min","step","htmlType","StyledTeamTable","process","DEFAULT","exact","columns","dataIndex","sorter","a","b","localeCompare","record","pagination","resetFields","base","parameters","param","replace","toString","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","reducer","persistConfig","storage","whitelist","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7d3a712c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/volleyball.78b80949.png\";","import { Player } from './player';\n\nexport interface GameEvent {\n  type: GameEventType;\n  positive?: boolean;\n  player?: Player;\n  at?: string;\n}\n\nexport enum GameEventType {\n  SERVICE = 'SERVICE',\n  RECEPTION = 'RECEPTION',\n  PASS = 'PASS',\n  ATTACK = 'ATTACK',\n  BLOCK = 'BLOCK',\n  DIG = 'DIG',\n  ACE = 'ACE',\n  T1_SCORE_INCREMENT = 'T1_SCORE_INCREMENT',\n  T1_SCORE_DECREMENT = 'T1_SCORE_DECREMENT',\n  T2_SCORE_INCREMENT = 'T2_SCORE_INCREMENT',\n  T2_SCORE_DECREMENT = 'T2_SCORE_DECREMENT',\n}\n\nexport const t = (type: GameEventType): string => {\n  switch (type) {\n    case GameEventType.ACE:\n      return 'Ace';\n    case GameEventType.ATTACK:\n      return 'Attaque';\n    case GameEventType.BLOCK:\n      return 'Block';\n    case GameEventType.DIG:\n      return 'Défense';\n    case GameEventType.PASS:\n      return 'Passe';\n    case GameEventType.RECEPTION:\n      return 'Réception';\n    case GameEventType.SERVICE:\n      return 'Service';\n  }\n\n  return type;\n};\n","import React from 'react';\nimport { Redirect, Route, SwitchProps } from 'react-router-dom';\n\nimport { RouteConfig } from './routes';\n\nconst RouteAndSubRoute: React.FC<SwitchProps & RouteConfig> = (route) => {\n  if (route.redirectTo) {\n    return <Route path={route.path} render={(): any => <Redirect to={route.redirectTo as string} />} />;\n  }\n\n  return <Route path={route.path} render={(props: any): any => <route.component {...props} routes={route.routes} />} />;\n};\n\nexport default RouteAndSubRoute;\n","import { lime, red } from '@ant-design/colors';\nimport { faThumbsDown, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { t } from 'src/models/event';\nimport styled from 'styled-components';\n\nimport { GameEvent, GameEventType } from '../models/event';\n\ninterface ActionButtonProps {\n  event: GameEvent;\n  onClick: (event: GameEvent) => void;\n}\n\nexport const ActionButton: React.FC<ActionButtonProps> = (props: ActionButtonProps): JSX.Element => {\n  return (\n    <StyledActionButton\n      positive={props.event.positive}\n      type={props.event.type}\n      onClick={(): void => props.onClick(props.event)}\n    >\n      <div className=\"label\">{t(props.event.type)}</div>\n      <FontAwesomeIcon size=\"2x\" icon={props.event.positive ? faThumbsUp : faThumbsDown} />\n    </StyledActionButton>\n  );\n};\n\nconst StyledActionButton = styled.div<{ positive: boolean | undefined; type: string }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: ${(props): string => (props.type === GameEventType.ACE ? '100%' : '170px')};\n  height: 100px;\n  margin: 8px;\n  background-color: ${(props): string => (props.positive ? lime[7] : red[6])};\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n  transition: 0.1s ease-in-out;\n\n  .label {\n    font-size: 24px;\n    margin-bottom: 8px;\n  }\n\n  &:hover {\n    box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { gold } from '@ant-design/colors';\nimport React from 'react';\nimport { Player } from 'src/models/player';\nimport styled from 'styled-components';\n\ninterface PlayerButtonProps {\n  player: Player;\n  onClick: (player: Player) => void;\n}\n\nexport const PlayerButton: React.FC<PlayerButtonProps> = (props: PlayerButtonProps): JSX.Element => {\n  return (\n    <StyledPlayerButton onClick={(): void => props.onClick(props.player)}>\n      <div className=\"label\">{props.player.name}</div>\n      <div className=\"number\">{props.player.number}</div>\n    </StyledPlayerButton>\n  );\n};\n\nconst StyledPlayerButton = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  min-width: 170px;\n  margin: 8px;\n  padding: 8px;\n  background-color: ${gold[6]};\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n\n  .label {\n    font-size: 24px;\n  }\n\n  .number {\n    font-size: 32px;\n  }\n\n  &:hover {\n    box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);\n  }\n`;\n","import React, { useState } from 'react';\nimport { Player } from 'src/models/player';\nimport styled from 'styled-components';\n\nimport { GameEvent, GameEventType } from '../models/event';\nimport { ActionButton } from './ActionButton';\nimport { PlayerButton } from './PlayerButton';\n\ninterface ActionGridProps {\n  team: Player[];\n  onAddAction: (event: GameEvent) => void;\n}\n\nexport const ActionGrid: React.FC<ActionGridProps> = (props: ActionGridProps): JSX.Element => {\n  const [eventClicked, setEventClicked]: [GameEvent | undefined, any] = useState(undefined);\n\n  const handleActionClicked = (event: GameEvent): void => {\n    setEventClicked(event);\n  };\n\n  const handlePlayerClicked = (player: Player): void => {\n    props.onAddAction({ ...(eventClicked as any), player });\n    setEventClicked(undefined);\n  };\n\n  return (\n    <StyledActionGrid>\n      {!eventClicked && (\n        <>\n          <div className=\"topline\">\n            <span>Que s'est-il passé ?</span>\n          </div>\n          <ActionButton\n            event={{ type: GameEventType.SERVICE, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.SERVICE, positive: false }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.RECEPTION, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.RECEPTION, positive: false }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.PASS, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.PASS, positive: false }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.ATTACK, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.ATTACK, positive: false }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.BLOCK, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.BLOCK, positive: false }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.DIG, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.DIG, positive: false }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n          <ActionButton\n            event={{ type: GameEventType.ACE, positive: true }}\n            onClick={(event): void => handleActionClicked(event)}\n          />\n        </>\n      )}\n\n      {eventClicked && (\n        <>\n          <div className=\"topline\">\n            <span>\n              Qui a {eventClicked.positive ? 'brillamment réussi' : '(encore) totalement foiré'} son geste{' '}\n              {eventClicked.positive ? '🎉' : '🐐'} (\n              <button className=\"link\" onClick={(): void => setEventClicked(undefined)}>\n                annuler\n              </button>\n              ) ?\n            </span>\n          </div>\n          {props.team.map((player) => (\n            <PlayerButton\n              key={player.name + ':' + player.number}\n              player={player}\n              onClick={(player): void => handlePlayerClicked(player)}\n            />\n          ))}\n        </>\n      )}\n    </StyledActionGrid>\n  );\n};\n\nconst StyledActionGrid = styled.div`\n  margin-top: 24px;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n\n  .topline {\n    width: 100%;\n    display: flex;\n    font-weight: bold;\n    justify-content: center;\n\n    span {\n      font-size: 20px;\n    }\n  }\n`;\n","import { cyan } from '@ant-design/colors';\nimport { faList, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Tooltip } from 'antd';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport volleyball from 'src/assets/images/volleyball.png';\nimport { Urls } from 'src/routes';\nimport styled from 'styled-components';\n\nexport const Topbar = (): JSX.Element => {\n  const history = useHistory();\n\n  return (\n    <StyledTopbar>\n      <span className=\"brand\" onClick={(): void => history.push(Urls.HOME)}>\n        Goat keeper\n        <img alt=\"volleyball\" src={volleyball} />\n      </span>\n      <div className=\"actions\">\n        <Tooltip placement=\"left\" title=\"matchs précédents\">\n          <FontAwesomeIcon size=\"2x\" icon={faList} onClick={(): void => history.push(Urls.GAME_LIST)} />\n        </Tooltip>\n        <Tooltip placement=\"left\" title=\"nouveau match\">\n          <FontAwesomeIcon size=\"2x\" icon={faPlusCircle} onClick={(): void => history.push(Urls.NEW_GAME)} />\n        </Tooltip>\n      </div>\n    </StyledTopbar>\n  );\n};\n\nconst StyledTopbar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 80px;\n  background: linear-gradient(to right, ${cyan[9]}, ${cyan[6]});\n  margin-bottom: 32px;\n\n  > span {\n    color: white;\n  }\n\n  .brand {\n    display: flex;\n    align-items: center;\n    font-family: 'Pacifico';\n    margin-left: 24px;\n    font-size: 30px;\n    cursor: pointer;\n\n    img {\n      width: 30px;\n      margin-left: 15px;\n    }\n  }\n\n  .actions svg {\n    color: white;\n    margin-right: 24px;\n    cursor: pointer;\n  }\n`;\n","import { GameEvent } from './event';\nimport { Team } from './team';\n\nexport interface Game {\n  id: string;\n  team1: Team;\n  team2: Team;\n  sets: GameSet[];\n  at: string;\n}\n\nexport interface GameSet {\n  team1Score: number;\n  team2Score: number;\n  events: GameEvent[];\n  at: string;\n}\n\nexport const isWon = (game: Game): boolean => {\n  return (\n    game.sets.filter((set) => set.team1Score > set.team2Score).length >\n    game.sets.filter((set) => set.team1Score < set.team2Score).length\n  );\n};\n\nexport const dateFormat = 'DD/MM/YYYY';\n","import { createEntityAdapter, createSlice, EntityState, PayloadAction } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { GameEvent, GameEventType } from 'src/models/event';\nimport { Game } from 'src/models/game';\nimport { Player } from 'src/models/player';\n\nexport const gameAdapter = createEntityAdapter<Game>();\n\nexport interface GameState extends EntityState<Game> {\n  total: number;\n}\n\nexport const gameInitialState: GameState = {\n  ...gameAdapter.getInitialState(),\n  total: 0,\n};\n\nexport const gameSlice = createSlice({\n  name: 'games',\n  initialState: gameInitialState,\n  reducers: {\n    addGame: (state: GameState, action: PayloadAction<Game>): void => {\n      gameAdapter.addOne(state, action.payload);\n    },\n    deleteGame: (state: GameState, action: PayloadAction<string>): void => {\n      gameAdapter.removeOne(state, action.payload);\n    },\n    addPlayer: (state: GameState, action: PayloadAction<{ game: Game; player: Player }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.team1.players.push(action.payload.player);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    deletePlayer: (state: GameState, action: PayloadAction<{ game: Game; playerKey: string }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      const playerProperties = action.payload.playerKey.split(':');\n      const player: Player = { name: playerProperties[0], number: parseInt(playerProperties[1], 10) };\n      game.team1.players = game.team1.players.filter((p) => player.name !== p.name && player.number !== p.number);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    incrementTeam1: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team1Score++;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T1_SCORE_INCREMENT,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    incrementTeam2: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team2Score++;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T2_SCORE_INCREMENT,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    decrementTeam1: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      if (action.payload.game.sets[action.payload.set].team1Score > 0) {\n        const game = _.cloneDeep(action.payload.game);\n        game.sets[action.payload.set].team1Score--;\n        game.sets[action.payload.set].events.push({\n          type: GameEventType.T1_SCORE_DECREMENT,\n          at: dayjs().format(),\n        });\n        gameAdapter.updateOne(state, { id: game.id, changes: game });\n      }\n    },\n    decrementTeam2: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      if (action.payload.game.sets[action.payload.set].team2Score > 0) {\n        const game = _.cloneDeep(action.payload.game);\n        game.sets[action.payload.set].team2Score--;\n        game.sets[action.payload.set].events.push({\n          type: GameEventType.T2_SCORE_DECREMENT,\n          at: dayjs().format(),\n        });\n        gameAdapter.updateOne(state, { id: game.id, changes: game });\n      }\n    },\n    addSet: (state: GameState, action: PayloadAction<Game>): void => {\n      const game = _.cloneDeep(action.payload);\n      game.sets.push({ team1Score: 0, team2Score: 0, events: [], at: dayjs().format() });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    addEvent: (state: GameState, action: PayloadAction<{ game: Game; set: number; event: GameEvent }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].events.push(action.payload.event);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n  },\n});\n\nexport const {\n  addEvent,\n  addGame,\n  addPlayer,\n  addSet,\n  decrementTeam1,\n  decrementTeam2,\n  deleteGame,\n  deletePlayer,\n  incrementTeam1,\n  incrementTeam2,\n} = gameSlice.actions;\n","import { blue, cyan, grey, lime, red } from '@ant-design/colors';\nimport { faMinusCircle, faPlus, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Radio, Row, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { ActionGrid } from 'src/components/ActionGrid';\nimport { Topbar } from 'src/components/Topbar';\nimport { GameEvent } from 'src/models/event';\nimport { dateFormat } from 'src/models/game';\nimport { buildUrl, Urls } from 'src/routes';\nimport {\n  addEvent,\n  addSet,\n  decrementTeam1,\n  decrementTeam2,\n  incrementTeam1,\n  incrementTeam2,\n} from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nconst { Title } = Typography;\n\nenum LeaderCode {\n  EQ = 'EQ',\n  T1 = 'T1',\n  T2 = 'T2',\n}\n\nconst Game = (): JSX.Element => {\n  const { id } = useParams();\n  const history = useHistory();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n  const dispatch = useDispatch();\n  const [set, setSet] = useState(game ? game.sets.length - 1 : 0);\n  let leader: LeaderCode = LeaderCode.EQ;\n\n  if (game) {\n    leader =\n      game.sets[set].team1Score > game.sets[set].team2Score\n        ? LeaderCode.T1\n        : game.sets[set].team1Score < game.sets[set].team2Score\n        ? LeaderCode.T2\n        : LeaderCode.EQ;\n  }\n\n  const handleAddAction = (event: GameEvent): void => {\n    const value = { game, set, event } as any;\n    dispatch(addEvent(value));\n  };\n\n  return (\n    <>\n      <Topbar />\n\n      {game && (\n        <StyledGame>\n          <Row>\n            <Col className=\"date\">{dayjs(game.at).format(dateFormat)}</Col>\n            <Col className=\"setSelector\">\n              <Radio.Group onChange={(e): void => setSet(e.target.value)} value={set} buttonStyle=\"solid\" size=\"large\">\n                {game.sets.map((set, index) => (\n                  <Radio.Button key={index} value={index}>\n                    Set {index + 1} ({set.team1Score}•{set.team2Score})\n                  </Radio.Button>\n                ))}\n              </Radio.Group>\n\n              {game.sets.length < 5 && (\n                <Button type=\"primary\" onClick={(): any => dispatch(addSet(game))} size=\"large\">\n                  <FontAwesomeIcon icon={faPlus} />\n                </Button>\n              )}\n            </Col>\n            <Col className=\"header\">\n              <div className=\"side left\">\n                <FontAwesomeIcon\n                  icon={faPlusCircle}\n                  size=\"3x\"\n                  onClick={(): any => dispatch(incrementTeam1({ game, set }))}\n                />\n                <FontAwesomeIcon\n                  icon={faMinusCircle}\n                  size=\"3x\"\n                  onClick={(): any => dispatch(decrementTeam1({ game, set }))}\n                />\n                <Title level={2}>{game.team1.name}</Title>\n                <span className={`score t1 leader${leader}`}>{game.sets[set].team1Score}</span>\n              </div>\n              <div className=\"side\">\n                <span className={`score t2 leader${leader}`}>{game.sets[set].team2Score}</span>\n                <Title level={2}>{game.team2.name}</Title>\n                <FontAwesomeIcon\n                  icon={faPlusCircle}\n                  size=\"3x\"\n                  onClick={(): any => dispatch(incrementTeam2({ game, set }))}\n                />\n                <FontAwesomeIcon\n                  icon={faMinusCircle}\n                  size=\"3x\"\n                  onClick={(): any => dispatch(decrementTeam2({ game, set }))}\n                />\n              </div>\n            </Col>\n            <Col className=\"actions\" xs={{ span: 20, offset: 2 }} lg={{ span: 10, offset: 7 }}>\n              <button\n                className=\"link\"\n                onClick={(): void =>\n                  history.push(buildUrl(Urls.TEAM_MANAGEMENT, [{ parameter: 'id', value: game.id }]))\n                }\n              >\n                Gérer mon équipe\n              </button>\n              <ActionGrid team={game.team1.players} onAddAction={handleAddAction} />\n            </Col>\n          </Row>\n        </StyledGame>\n      )}\n    </>\n  );\n};\n\nconst StyledGame = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n\n  .date {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    font-size: 24px;\n  }\n\n  .setSelector {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    margin: 12px 0px;\n\n    .ant-radio-button-wrapper {\n      width: 120px;\n      text-align: center;\n    }\n\n    button {\n      margin-left: 8px;\n    }\n  }\n\n  .header {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n\n    .side {\n      display: flex;\n      align-items: center;\n      user-select: none;\n\n      svg {\n        transition: 0.3s all;\n        color: ${cyan[8]};\n\n        &:hover {\n          color: ${cyan[7]};\n        }\n      }\n\n      h2 {\n        width: 150px;\n        margin: 0 8px;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        color: ${grey[5]};\n      }\n\n      &.left h2 {\n        text-align: right;\n      }\n\n      .score {\n        width: 80px;\n        text-align: center;\n        font-size: 36px;\n        font-weight: 700;\n        padding: 4px;\n        margin: 4px;\n        background-color: ${blue[4]};\n        color: white;\n        border-radius: 4px;\n\n        &.t1.leaderT1,\n        &.t2.leaderT2 {\n          background-color: ${lime[7]};\n        }\n\n        &.t1.leaderT2,\n        &.t2.leaderT1 {\n          background-color: ${red[6]};\n        }\n      }\n\n      svg {\n        margin: 8px;\n        cursor: pointer;\n      }\n    }\n  }\n\n  .actions button {\n    display: block;\n    margin: auto;\n  }\n`;\n\nexport default Game;\n","import { blue, lime, red } from '@ant-design/colors';\nimport React from 'react';\nimport { Game } from 'src/models/game';\nimport styled from 'styled-components';\n\ninterface SetResultProps {\n  game: Game;\n}\n\nexport const SetResults: React.FC<SetResultProps> = (props: SetResultProps): JSX.Element => {\n  return (\n    <StyledSetResults>\n      {props.game.sets.map((set, index) => (\n        <span\n          key={index}\n          className={set.team1Score > set.team2Score ? 'won' : set.team1Score < set.team2Score ? 'lost' : ''}\n        >\n          {set.team1Score}•{set.team2Score}\n        </span>\n      ))}\n    </StyledSetResults>\n  );\n};\n\nconst StyledSetResults = styled.div`\n  display: flex;\n\n  span {\n    padding: 2px 4px;\n    margin-left: 4px;\n    border-radius: 4px;\n    text-align: center;\n    color: white;\n    font-weight: 700;\n    background-color: ${blue[4]};\n\n    &.won {\n      background-color: ${lime[7]};\n    }\n\n    &.lost {\n      background-color: ${red[6]};\n    }\n  }\n`;\n","import { cyan, lime, red } from '@ant-design/colors';\nimport {\n  faChartLine,\n  faCheckCircle,\n  faFileExport,\n  faSearch,\n  faTimesCircle,\n  faTrash,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, List, Popconfirm, Row, Tooltip, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { SetResults } from 'src/components/SetResults';\nimport { Topbar } from 'src/components/Topbar';\nimport { dateFormat, isWon } from 'src/models/game';\nimport { buildUrl, Urls } from 'src/routes';\nimport { deleteGame } from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nconst { Title } = Typography;\n\nconst GameList = (): JSX.Element => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const games = useSelector((state: RootState) => state.games.entities);\n\n  return (\n    <>\n      <Topbar />\n\n      <StyledGameList>\n        <Row>\n          <Col xs={{ span: 20, offset: 2 }} lg={{ span: 12, offset: 6 }}>\n            <Title level={2}>Matchs enregistrés sur ce navigateur</Title>\n            <List\n              bordered\n              itemLayout=\"horizontal\"\n              size=\"large\"\n              dataSource={Object.values(games).map((game) => game)}\n              renderItem={(game): JSX.Element => (\n                <List.Item\n                  actions={[\n                    <Tooltip key=\"view\" title=\"editer le score et les stats\">\n                      <FontAwesomeIcon\n                        icon={faSearch}\n                        size=\"lg\"\n                        onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n                      />\n                    </Tooltip>,\n                    <Tooltip key=\"stats\" title=\"visualiser les données du match\">\n                      <FontAwesomeIcon\n                        icon={faChartLine}\n                        size=\"lg\"\n                        onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n                      />\n                    </Tooltip>,\n                    <Tooltip key=\"export\" title=\"exporter les données du match\">\n                      <FontAwesomeIcon\n                        icon={faFileExport}\n                        size=\"lg\"\n                        onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n                      />\n                    </Tooltip>,\n                    <Tooltip key=\"delete\" title=\"supprimer le match\">\n                      <Popconfirm\n                        title={'sûr ?'}\n                        onConfirm={(): any => dispatch(deleteGame(game.id))}\n                        okText=\"Oui\"\n                        cancelText=\"Non en fait\"\n                      >\n                        <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n                      </Popconfirm>\n                    </Tooltip>,\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={<FontAwesomeIcon size=\"3x\" icon={isWon(game) ? faCheckCircle : faTimesCircle} />}\n                    title={game.team1.name + ' vs ' + game.team2.name + ', le ' + dayjs(game.at).format(dateFormat)}\n                    description={<SetResults game={game} />}\n                  />\n                </List.Item>\n              )}\n            />\n          </Col>\n\n          <Col className=\"button\" xs={{ span: 20, offset: 2 }} lg={{ span: 12, offset: 6 }}>\n            <Button size=\"large\" type=\"primary\" block onClick={(): void => history.push(Urls.NEW_GAME)}>\n              Nouveau match\n            </Button>\n          </Col>\n        </Row>\n      </StyledGameList>\n    </>\n  );\n};\n\nconst StyledGameList = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n\n  .ant-list-item-meta-title {\n    font-size: 18px;\n    font-weight: 700;\n  }\n\n  .ant-list-item-meta-description {\n    font-size: 16px;\n  }\n\n  svg[data-icon='check-circle'] {\n    color: ${lime[7]};\n  }\n\n  svg[data-icon='times-circle'] {\n    color: ${red[6]};\n  }\n\n  .button {\n    margin-top: 16px;\n\n    button {\n      height: 56px;\n    }\n\n    span {\n      font-weight: bold;\n      font-size: 24px;\n    }\n  }\n\n  .ant-list-item-action {\n    svg {\n      transition: 0.3s all;\n\n      &:hover {\n        color: ${cyan[8]};\n      }\n\n      &[data-icon='trash']:hover {\n      color: ${red[5]};\n    }\n  }\n`;\n\nexport default GameList;\n","import { Button, Col, Row } from 'antd';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { Urls } from 'src/routes';\nimport styled from 'styled-components';\n\nconst Home = (): JSX.Element => {\n  const history = useHistory();\n\n  return (\n    <>\n      <Topbar />\n      <StyledHome>\n        <Row>\n          <Col xs={{ span: 20, offset: 2 }} lg={{ span: 12, offset: 6 }}>\n            <Button block size=\"large\" type=\"primary\" onClick={(): void => history.push(Urls.NEW_GAME)}>\n              Nouveau match\n            </Button>\n            <Button block size=\"large\" type=\"primary\" onClick={(): void => history.push(Urls.GAME_LIST)}>\n              Matchs enregistrés sur cette machine\n            </Button>\n          </Col>\n        </Row>\n      </StyledHome>\n    </>\n  );\n};\n\nconst StyledHome = styled.div`\n  height: calc(100vh - 80px);\n\n  button {\n    font-size: 24px;\n    margin-top: 24px;\n    font-weight: bold;\n    height: 100px;\n  }\n`;\n\nexport default Home;\n","import { red } from '@ant-design/colors';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Form, Input, InputNumber, Row, Space, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { GameSet } from 'src/models/game';\nimport { Team } from 'src/models/team';\nimport { buildUrl, Urls } from 'src/routes';\nimport { addGame } from 'src/store/slices/gameSlice';\nimport styled from 'styled-components';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst { Title } = Typography;\n\nconst NewGame = (): JSX.Element => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const handleSubmit = (): void => {\n    const uuid = uuidv4();\n\n    let players = form.getFieldValue('players');\n    if (!players) {\n      players = [{ name: 'Tous', number: 0 }];\n    }\n\n    const team1: Team = {\n      name: form.getFieldValue('team1'),\n      players: players,\n    };\n\n    const team2: Team = {\n      name: form.getFieldValue('team2'),\n      players: [],\n    };\n\n    const sets: GameSet[] = [\n      {\n        team1Score: 0,\n        team2Score: 0,\n        events: [],\n        at: dayjs().format(),\n      },\n    ];\n\n    dispatch(addGame({ id: uuid, team1: team1, team2: team2, sets: sets, at: dayjs().format() }));\n    history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: uuid }]));\n  };\n\n  return (\n    <>\n      <Topbar />\n      <StyledNewGame>\n        <Row>\n          <Col xs={{ span: 20, offset: 2 }} lg={{ span: 8, offset: 8 }}>\n            <Title level={2}>Nouveau match</Title>\n            <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n              <Form.Item\n                name=\"team1\"\n                label=\"Ton équipe\"\n                rules={[{ required: true, message: 'requis' }]}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"team2\"\n                label=\"L'autre équipe\"\n                rules={[{ required: true, message: 'requis' }]}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.List name=\"players\">\n                {(fields, { add, remove }): JSX.Element => {\n                  return (\n                    <div>\n                      {fields.map((field) => (\n                        <Space key={field.key} align=\"start\">\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'name']}\n                            fieldKey={[field.fieldKey, 'name']}\n                            rules={[{ required: true, message: 'requis' }]}\n                            label=\"Nom\"\n                          >\n                            <Input placeholder=\"nom du joueur\" size=\"large\" />\n                          </Form.Item>\n\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'number']}\n                            fieldKey={[field.fieldKey, 'number']}\n                            rules={[{ required: true, message: 'requis' }]}\n                            label=\"Numéro\"\n                          >\n                            <InputNumber min={0} step=\"1\" size=\"large\" />\n                          </Form.Item>\n\n                          {fields.length > 1 ? (\n                            <FontAwesomeIcon\n                              icon={faTrash}\n                              size=\"lg\"\n                              className=\"dynamic-delete-button\"\n                              onClick={(): void => remove(field.name)}\n                            />\n                          ) : null}\n                        </Space>\n                      ))}\n\n                      <Form.Item className=\"add-player\">\n                        <Button\n                          block\n                          type=\"dashed\"\n                          onClick={(): void => {\n                            add();\n                          }}\n                          size=\"large\"\n                        >\n                          <FontAwesomeIcon icon={faPlus} /> Ajouter un joueur\n                        </Button>\n                      </Form.Item>\n                    </div>\n                  );\n                }}\n              </Form.List>\n\n              <Form.Item>\n                <Button block type=\"primary\" htmlType=\"submit\" size=\"large\">\n                  OK\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </StyledNewGame>\n    </>\n  );\n};\n\nconst StyledNewGame = styled.div`\n  height: calc(100vh - 80px);\n  margin-top: 24px;\n\n  .ant-space {\n    display: flex;\n    width: 100%;\n\n    .ant-space-item:nth-child(1) {\n      width: 50%;\n    }\n\n    svg.fa-trash {\n      margin-top: 42px;\n      margin-left: 8px;\n      cursor: pointer;\n\n      &:hover {\n        color: ${red[6]};\n      }\n    }\n  }\n\n  .add-player svg.fa-plus {\n    margin-right: 8px;\n  }\n`;\n\nexport default NewGame;\n","/* eslint-disable react/display-name */\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Form, Input, InputNumber, Row, Table, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { Game } from 'src/models/game';\nimport { Player } from 'src/models/player';\nimport { buildUrl, Urls } from 'src/routes';\nimport { addPlayer, deletePlayer } from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nconst { Title } = Typography;\n\ninterface TeamManagementProps {\n  game: Game;\n}\n\nexport const TeamManagement: React.FC<TeamManagementProps> = (): JSX.Element => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n  const [form] = Form.useForm();\n\n  const columns = [\n    { title: 'Nom', dataIndex: 'name', sorter: (a: Player, b: Player): number => a.name.localeCompare(b.name) },\n    { title: 'Numéro', dataIndex: 'number', sorter: (a: Player, b: Player): number => a.number - b.number },\n    {\n      title: '',\n      dataIndex: '',\n      key: 'x',\n      render: (record: any): JSX.Element => {\n        return (\n          <>\n            <FontAwesomeIcon\n              icon={faTrash}\n              onClick={(): any => dispatch(deletePlayer({ game: game, playerKey: record.key }))}\n            />\n          </>\n        );\n      },\n    },\n  ];\n\n  const handleAddPlayer = (player: Player): void => {\n    dispatch(addPlayer({ game: game, player: player }));\n    form.resetFields();\n  };\n\n  return (\n    <>\n      <Topbar />\n\n      {game && (\n        <StyledTeamTable>\n          <Row>\n            <Col xs={{ span: 20, offset: 2 }} lg={{ span: 12, offset: 6 }}>\n              <Title level={2}>Gérer mon équipe</Title>\n              <button\n                className=\"link\"\n                onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n              >\n                Retour au match\n              </button>\n\n              <Table\n                bordered={true}\n                dataSource={game.team1.players.map((player) => {\n                  return { ...player, key: player.name + ':' + player.number };\n                })}\n                columns={columns}\n                pagination={false}\n              ></Table>\n\n              <Form form={form} layout=\"inline\" onFinish={handleAddPlayer}>\n                <Form.Item\n                  name=\"name\"\n                  label=\"Nom\"\n                  rules={[{ required: true, message: 'requis' }]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input placeholder=\"nouveau joueur\" />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"number\"\n                  label=\"Numéro\"\n                  rules={[{ required: true, message: 'requis' }]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <InputNumber />\n                </Form.Item>\n\n                <Form.Item>\n                  <Button block type=\"primary\" htmlType=\"submit\">\n                    OK\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Col>\n          </Row>\n        </StyledTeamTable>\n      )}\n    </>\n  );\n};\n\nconst StyledTeamTable = styled.div`\n  button.link {\n    margin-bottom: 16px;\n  }\n\n  form {\n    margin-top: 24px;\n  }\n`;\n","import Game from './components/Game';\nimport GameList from './components/GameList';\nimport Home from './components/Home';\nimport NewGame from './components/NewGame';\nimport { TeamManagement } from './components/TeamManagement';\n\nexport interface RouteConfig {\n  path: string;\n  exact?: boolean;\n  component?: any;\n  redirectTo?: string;\n  routes?: RouteConfig[];\n}\n\nexport interface MenuElement {\n  path?: string;\n  textKey?: string;\n  icon?: JSX.Element;\n  weight?: number;\n  children?: MenuElement[];\n}\n\nexport const Urls = {\n  HOME: process.env.PUBLIC_URL + '/home',\n  NEW_GAME: process.env.PUBLIC_URL + '/new-game',\n  GAME_LIST: process.env.PUBLIC_URL + '/game-list',\n  GAME: process.env.PUBLIC_URL + '/game/:id',\n  TEAM_MANAGEMENT: process.env.PUBLIC_URL + '/game/:id/team',\n  DEFAULT: process.env.PUBLIC_URL + '/:anything_else',\n};\n\nexport const routes: RouteConfig[] = [\n  {\n    path: Urls.HOME,\n    exact: true,\n    component: Home,\n  },\n  {\n    path: Urls.NEW_GAME,\n    exact: true,\n    component: NewGame,\n  },\n  {\n    path: Urls.GAME,\n    exact: true,\n    component: Game,\n  },\n  {\n    path: Urls.GAME_LIST,\n    exact: true,\n    component: GameList,\n  },\n  {\n    path: Urls.TEAM_MANAGEMENT,\n    exact: true,\n    component: TeamManagement,\n  },\n  {\n    path: Urls.DEFAULT,\n    redirectTo: Urls.HOME,\n  },\n  {\n    path: '',\n    exact: true,\n    redirectTo: Urls.HOME,\n  },\n];\n\ninterface UrlParameter {\n  parameter: string;\n  value: any;\n}\n\nexport const buildUrl = (base: string, parameters: UrlParameter[]): string => {\n  parameters.map((param: UrlParameter) => {\n    base = base.replace(':' + param.parameter, param.value.toString());\n    return null;\n  });\n\n  return base;\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\n\nimport RouteAndSubRoute from '../RouteAndSubRoute';\nimport { routes } from '../routes';\n\nconst App = (): JSX.Element => {\n  return (\n    <Router>\n      <Switch>\n        {routes.map((route, index) => (\n          <RouteAndSubRoute key={index} {...route} />\n        ))}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport storage from 'redux-persist/lib/storage';\n\nimport { gameSlice } from './slices/gameSlice';\n\nconst rootReducer = combineReducers({ games: gameSlice.reducer });\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst persistConfig = {\n  key: 'gkState',\n  storage: storage,\n  whitelist: ['games'],\n  stateReconciler: autoMergeLevel2,\n};\n\nconst pReducer = persistReducer<RootState>(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: pReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n","import './styles/reset.css';\nimport 'antd/dist/antd.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { persistor, store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}