{"version":3,"sources":["models/index.ts","models/game.ts","models/event.ts","components/ActionButton.tsx","components/PlayerButton.tsx","components/ActionGrid.tsx","components/ScoreEditor.tsx","components/SetSelector.tsx","components/Topbar.tsx","store/slices/gameSlice.ts","components/Game.tsx","components/SetResults.tsx","components/GameList.tsx","components/SetTimeChart.tsx","components/GameStats.tsx","components/Home.tsx","components/NewGame.tsx","components/TeamManagement.tsx","routing/routes.tsx","routing/RouteAndSubRoute.tsx","components/App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["MAX_SCORE","MIN_SCORE","displayName","game","team1","name","team2","duration","set","events","length","dayjs","at","diff","sortGames","game1","game2","localeCompare","countEvents","sets","reduce","total","GameEventType","t","type","ACE","ATTACK","BLOCK","DIG","PASS","RECEPTION","SERVICE","ActionButton","props","StyledActionButton","positive","event","onClick","className","styled","div","lime","red","PlayerButton","StyledPlayerButton","player","number","blue","LeaderCode","ActionGrid","useState","undefined","eventClicked","setEventClicked","handleActionClicked","format","positiveEvents","Object","values","filter","T1_SCORE_DECREMENT","T1_SCORE_INCREMENT","T1_SCORE_UPDATE","T2_SCORE_DECREMENT","T2_SCORE_INCREMENT","T2_SCORE_UPDATE","includes","negativeEvents","StyledActionGrid","map","key","team","onAddAction","handlePlayerClicked","ScoreEditor","leader","t1Score","t2Score","T1","T2","EQ","StyedScoreEditor","icon","faChevronUp","size","onIncrementT1","faChevronDown","onDecrementT1","onIncrementT2","onDecrementT2","cyan","SetSelector","StyledSetSelector","Group","onChange","e","onSetChanged","target","value","selectedSet","buttonStyle","index","Button","team1Score","team2Score","onAddSet","faPlus","Topbar","history","useHistory","StyledTopbar","push","Urls","HOME","placement","title","faList","GAME_LIST","faPlusCircle","NEW_GAME","to","pathname","faGithub","gameAdapter","createEntityAdapter","gameInitialState","getInitialState","gameSlice","createSlice","initialState","reducers","addGame","state","action","addOne","payload","deleteGame","removeOne","addPlayer","_","cloneDeep","players","updateOne","id","changes","deletePlayer","playerProperties","playerKey","split","parseInt","p","incrementTeam1","incrementTeam2","decrementTeam1","decrementTeam2","addSet","addEvent","actions","StyledGame","grey","SetResults","StyledSetResults","Title","Typography","StyledGameList","SetTimeChart","t1Data","time","valueOf","scoreEvents","data","t1LastScore","t2LastScore","forEach","lineProps","strokeWidth","activeDot","r","legendType","width","height","strokeDasharray","dataKey","domain","tickFormatter","timestamp","timeFormat","labelFormatter","stroke","StyledGameStats","StyledHome","NewGame","dispatch","useDispatch","Form","useForm","form","StyledNewGame","colLayout","level","layout","onFinish","uuid","uuidv4","getFieldValue","buildUrl","GAME","parameter","Item","label","rules","required","message","validateTrigger","List","fields","add","remove","field","align","fieldKey","placeholder","min","step","faTrash","block","htmlType","StyledTeamTable","process","GAME_STATS","TEAM_MANAGEMENT","DEFAULT","routes","path","exact","component","xs","span","offset","lg","useParams","useSelector","games","entities","setSet","dateFormat","columns","render","sorter","isBefore","faSearch","faChartLine","faFileExport","onConfirm","okText","cancelText","bordered","dataSource","pagination","Fragment","dataIndex","a","b","record","some","error","resetFields","redirectTo","base","parameters","param","replace","toString","RouteAndSubRoute","route","md","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","reducer","persistConfig","storage","whitelist","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.671229d9.chunk.js","sourcesContent":["export * from './event';\nexport * from './game';\nexport * from './player';\nexport * from './team';\n","import dayjs from 'dayjs';\nimport { GameEvent } from 'src/models/event';\nimport { Team } from 'src/models/team';\n\nexport const MAX_SCORE = 99;\nexport const MIN_SCORE = 0;\n\nexport interface Game {\n  id: string;\n  team1: Team;\n  team2: Team;\n  sets: GameSet[];\n  at: string;\n}\n\nexport interface GameSet {\n  team1Score: number;\n  team2Score: number;\n  events: GameEvent[];\n  at: string;\n}\n\nexport const isWon = (game: Game): boolean => {\n  return (\n    game.sets.filter((set) => set.team1Score > set.team2Score).length >\n    game.sets.filter((set) => set.team1Score < set.team2Score).length\n  );\n};\n\nexport const displayName = (game: Game): string => game.team1.name + ' vs ' + game.team2.name;\n\nexport const duration = (set: GameSet): number => {\n  if (set.events.length < 2) {\n    return 0;\n  }\n\n  return dayjs(set.events[set.events.length - 1].at).diff(set.events[0].at, 'minute');\n};\n\nexport const sortGames = (game1: Game, game2: Game): number =>\n  (game1.team1.name + game1.team2.name).localeCompare(game2.team1.name + game2.team2.name);\n\nexport const countEvents = (game: Game): number => game.sets.reduce((total, set) => total + set.events.length, 0);\n","import { Player } from './player';\n\nexport interface GameEvent {\n  type: GameEventType;\n  positive?: boolean;\n  player?: Player;\n  value?: number;\n  at?: string;\n}\n\nexport enum GameEventType {\n  SERVICE = 'SERVICE',\n  RECEPTION = 'RECEPTION',\n  PASS = 'PASS',\n  ATTACK = 'ATTACK',\n  BLOCK = 'BLOCK',\n  DIG = 'DIG',\n  ACE = 'ACE',\n  T1_SCORE_INCREMENT = 'T1_SCORE_INCREMENT',\n  T1_SCORE_DECREMENT = 'T1_SCORE_DECREMENT',\n  T1_SCORE_UPDATE = 'T1_SCORE_UPDATE',\n  T2_SCORE_INCREMENT = 'T2_SCORE_INCREMENT',\n  T2_SCORE_DECREMENT = 'T2_SCORE_DECREMENT',\n  T2_SCORE_UPDATE = 'T2_SCORE_UPDATE',\n}\n\nexport const t = (type: GameEventType): string => {\n  switch (type) {\n    case GameEventType.ACE:\n      return 'Ace';\n    case GameEventType.ATTACK:\n      return 'Attaque';\n    case GameEventType.BLOCK:\n      return 'Block';\n    case GameEventType.DIG:\n      return 'Défense';\n    case GameEventType.PASS:\n      return 'Passe';\n    case GameEventType.RECEPTION:\n      return 'Réception';\n    case GameEventType.SERVICE:\n      return 'Service';\n  }\n\n  return type;\n};\n","import { lime, red } from '@ant-design/colors';\nimport React from 'react';\nimport { GameEvent, t } from 'src/models';\nimport styled from 'styled-components';\n\ninterface ActionButtonProps {\n  event: GameEvent;\n  onClick: (event: GameEvent) => void;\n}\n\nexport const ActionButton: React.FC<ActionButtonProps> = (props: ActionButtonProps): JSX.Element => {\n  return (\n    <StyledActionButton\n      positive={props.event.positive}\n      type={props.event.type}\n      onClick={(): void => props.onClick(props.event)}\n    >\n      <div className=\"label\">{t(props.event.type)}</div>\n    </StyledActionButton>\n  );\n};\n\nconst StyledActionButton = styled.div<{ positive: boolean | undefined; type: string }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  padding: 16px;\n  margin: 0px 8px 8px 0px;\n  background-color: ${(props): string => (props.positive ? lime[7] : red[6])};\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n\n  .label {\n    font-size: 24px;\n  }\n`;\n","import { blue } from '@ant-design/colors';\nimport React from 'react';\nimport { Player } from 'src/models/player';\nimport styled from 'styled-components';\n\ninterface PlayerButtonProps {\n  player: Player;\n  onClick: (player: Player) => void;\n}\n\nexport const PlayerButton: React.FC<PlayerButtonProps> = (props: PlayerButtonProps): JSX.Element => {\n  return (\n    <StyledPlayerButton onClick={(): void => props.onClick(props.player)}>\n      <div className=\"label\">{props.player.name}</div>\n      <div className=\"number\">{props.player.number}</div>\n    </StyledPlayerButton>\n  );\n};\n\nconst StyledPlayerButton = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n  padding: 16px;\n  margin: 0px 8px 8px 0px;\n  background-color: ${blue[4]};\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n\n  .label {\n    font-size: 24px;\n  }\n\n  .number {\n    font-size: 32px;\n  }\n`;\n","import { blue, lime, red } from '@ant-design/colors';\nimport dayjs from 'dayjs';\nimport React, { useState } from 'react';\nimport { ActionButton } from 'src/components/ActionButton';\nimport { PlayerButton } from 'src/components/PlayerButton';\nimport { GameEvent, GameEventType, Player } from 'src/models';\nimport styled from 'styled-components';\n\ninterface ActionGridProps {\n  team: Player[];\n  onAddAction: (event: GameEvent) => void;\n}\n\nexport const ActionGrid: React.FC<ActionGridProps> = (props: ActionGridProps): JSX.Element => {\n  const [eventClicked, setEventClicked]: [GameEvent | undefined, any] = useState(undefined);\n\n  const handleActionClicked = (event: GameEvent): void => {\n    setEventClicked({ ...event, at: dayjs().format() });\n  };\n\n  const handlePlayerClicked = (player: Player): void => {\n    props.onAddAction({ ...(eventClicked as any), player });\n    setEventClicked(undefined);\n  };\n\n  const positiveEvents = Object.values(GameEventType).filter(\n    (type) =>\n      ![\n        GameEventType.T1_SCORE_DECREMENT,\n        GameEventType.T1_SCORE_INCREMENT,\n        GameEventType.T1_SCORE_UPDATE,\n        GameEventType.T2_SCORE_DECREMENT,\n        GameEventType.T2_SCORE_INCREMENT,\n        GameEventType.T2_SCORE_UPDATE,\n      ].includes(type)\n  );\n\n  const negativeEvents = Object.values(GameEventType).filter(\n    (type) =>\n      ![\n        GameEventType.T1_SCORE_DECREMENT,\n        GameEventType.T1_SCORE_INCREMENT,\n        GameEventType.T1_SCORE_UPDATE,\n        GameEventType.T2_SCORE_DECREMENT,\n        GameEventType.T2_SCORE_INCREMENT,\n        GameEventType.T2_SCORE_UPDATE,\n        GameEventType.ACE,\n      ].includes(type)\n  );\n\n  return (\n    <StyledActionGrid>\n      {!eventClicked && (\n        <>\n          <div className=\"topline\">\n            <span>Que s&apos;est-il passé ?</span>\n          </div>\n          <div className=\"side success\">\n            {positiveEvents.map((type) => (\n              <ActionButton key={type} event={{ type: type, positive: true }} onClick={handleActionClicked} />\n            ))}\n          </div>\n          <div className=\"side failure\">\n            {negativeEvents.map((type) => (\n              <ActionButton key={type} event={{ type: type, positive: false }} onClick={handleActionClicked} />\n            ))}\n          </div>\n        </>\n      )}\n\n      {eventClicked && (\n        <>\n          <div className=\"topline\">\n            <span>\n              Qui a {eventClicked.positive ? 'brillamment réussi' : '(encore) totalement foiré'} son geste (\n              <button className=\"link\" onClick={(): void => setEventClicked(undefined)}>\n                annuler\n              </button>\n              ) ?\n            </span>\n          </div>\n          <div className=\"players\">\n            {props.team.map((player) => (\n              <PlayerButton\n                key={player.name + ':' + player.number}\n                player={player}\n                onClick={(player): void => handlePlayerClicked(player)}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </StyledActionGrid>\n  );\n};\n\nconst StyledActionGrid = styled.div`\n  .topline {\n    width: 100%;\n    display: flex;\n    font-weight: bold;\n    justify-content: center;\n\n    span {\n      font-size: 20px;\n    }\n\n    button.link {\n      font-weight: 700;\n    }\n  }\n\n  .side,\n  .players {\n    padding: 16px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin-bottom: 16px;\n  }\n\n  .side {\n    &.success {\n      background-color: ${lime[1]};\n      border: 2px solid ${lime[3]};\n    }\n\n    &.failure {\n      background-color: ${red[1]};\n      border: 2px solid ${red[3]};\n    }\n  }\n\n  .players {\n    background-color: ${blue[1]};\n    border: 2px solid ${blue[3]};\n  }\n`;\n","import { blue, cyan, lime, red } from '@ant-design/colors';\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport styled from 'styled-components';\n\nenum LeaderCode {\n  EQ = 'EQ',\n  T1 = 'T1',\n  T2 = 'T2',\n}\n\ninterface ScoreEditorProps {\n  t1Score: number;\n  t2Score: number;\n  onIncrementT1: () => void;\n  onDecrementT1: () => void;\n  onIncrementT2: () => void;\n  onDecrementT2: () => void;\n}\n\nexport const ScoreEditor: React.FC<ScoreEditorProps> = (props: ScoreEditorProps): JSX.Element => {\n  const leader: LeaderCode =\n    props.t1Score > props.t2Score ? LeaderCode.T1 : props.t1Score < props.t2Score ? LeaderCode.T2 : LeaderCode.EQ;\n\n  return (\n    <StyedScoreEditor>\n      <div className=\"side left\">\n        <div className=\"score-controls\">\n          <FontAwesomeIcon icon={faChevronUp} size=\"lg\" onClick={props.onIncrementT1} />\n          <FontAwesomeIcon icon={faChevronDown} size=\"lg\" onClick={props.onDecrementT1} />\n        </div>\n        <span className={`score t1 leader${leader}`}>{props.t1Score}</span>\n      </div>\n      <div className=\"side right\">\n        <span className={`score t2 leader${leader}`}>{props.t2Score}</span>\n        <div className=\"score-controls\">\n          <FontAwesomeIcon icon={faChevronUp} size=\"lg\" onClick={props.onIncrementT2} />\n          <FontAwesomeIcon icon={faChevronDown} size=\"lg\" onClick={props.onDecrementT2} />\n        </div>\n      </div>\n    </StyedScoreEditor>\n  );\n};\n\nconst StyedScoreEditor = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n\n  .side {\n    display: flex;\n    align-items: center;\n    user-select: none;\n\n    svg {\n      transition: 0.3s all;\n      color: ${cyan[8]};\n\n      &:hover {\n        color: ${cyan[6]};\n      }\n    }\n\n    .score {\n      width: 80px;\n      text-align: center;\n      font-size: 44px;\n      font-weight: 700;\n      padding: 4px;\n      background-color: ${blue[4]};\n      color: white;\n\n      &.t1.leaderT1,\n      &.t2.leaderT2 {\n        background-color: ${lime[7]};\n      }\n\n      &.t1.leaderT2,\n      &.t2.leaderT1 {\n        background-color: ${red[6]};\n      }\n    }\n\n    .score-controls {\n      width: 40px;\n      padding: 4px;\n      display: flex;\n      flex-direction: column;\n      background-color: ${cyan[8]};\n\n      svg {\n        color: white;\n        margin: 8px;\n        cursor: pointer;\n        transition: 0.3s all;\n\n        &:hover {\n          color: ${cyan[7]};\n        }\n      }\n    }\n\n    &.left {\n      .score-controls {\n        border-top-left-radius: 4px;\n        border-bottom-left-radius: 4px;\n      }\n    }\n\n    &.right {\n      .score-controls {\n        border-top-right-radius: 4px;\n        border-bottom-right-radius: 4px;\n      }\n    }\n  }\n`;\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Radio } from 'antd';\nimport React from 'react';\nimport { Game } from 'src/models/game';\nimport styled from 'styled-components';\n\ninterface SetSelectorProps {\n  game: Game;\n  selectedSet: number;\n  onSetChanged: (setNumber: number) => void;\n  onAddSet: () => void;\n}\n\nexport const SetSelector: React.FC<SetSelectorProps> = (props: SetSelectorProps): JSX.Element => {\n  return (\n    <StyledSetSelector>\n      <Radio.Group\n        onChange={(e): void => props.onSetChanged(e.target.value)}\n        value={props.selectedSet}\n        buttonStyle=\"solid\"\n        size=\"large\"\n      >\n        {props.game.sets.map((set, index) => (\n          <Radio.Button key={index} value={index}>\n            {set.team1Score}•{set.team2Score}\n          </Radio.Button>\n        ))}\n      </Radio.Group>\n\n      {props.game.sets.length < 5 && (\n        <Button type=\"primary\" onClick={props.onAddSet} size=\"large\">\n          <FontAwesomeIcon icon={faPlus} />\n        </Button>\n      )}\n    </StyledSetSelector>\n  );\n};\n\nconst StyledSetSelector = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 12px 0px;\n\n  .ant-radio-button-wrapper {\n    width: 48px;\n    padding: 0px 2px;\n    text-align: center;\n  }\n\n  button {\n    margin-left: 8px;\n  }\n`;\n","import { cyan } from '@ant-design/colors';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faList, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Tooltip } from 'antd';\nimport React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Urls } from 'src/routing';\nimport styled from 'styled-components';\n\nexport const Topbar = (): JSX.Element => {\n  const history = useHistory();\n\n  return (\n    <StyledTopbar>\n      <span className=\"brand\" onClick={(): void => history.push(Urls.HOME)}>\n        Goat keeper\n      </span>\n      <div className=\"actions\">\n        <Tooltip placement=\"left\" title=\"matchs précédents\">\n          <FontAwesomeIcon size=\"lg\" icon={faList} onClick={(): void => history.push(Urls.GAME_LIST)} />\n        </Tooltip>\n        <Tooltip placement=\"left\" title=\"nouveau match\">\n          <FontAwesomeIcon size=\"lg\" icon={faPlusCircle} onClick={(): void => history.push(Urls.NEW_GAME)} />\n        </Tooltip>\n        <Link to={{ pathname: 'https://github.com/florianMo/goat-keeper' }} target=\"_blank\">\n          <FontAwesomeIcon size=\"lg\" icon={faGithub} />\n        </Link>\n      </div>\n    </StyledTopbar>\n  );\n};\n\nconst StyledTopbar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 80px;\n  background: linear-gradient(to right, ${cyan[9]}, ${cyan[6]});\n  margin-bottom: 16px;\n\n  > span {\n    color: white;\n  }\n\n  .brand {\n    display: flex;\n    align-items: center;\n    font-family: 'Pacifico';\n    margin-left: 24px;\n    font-size: 30px;\n    cursor: pointer;\n\n    img {\n      width: 30px;\n      margin-left: 15px;\n    }\n  }\n\n  .actions svg {\n    color: white;\n    margin-right: 24px;\n    cursor: pointer;\n    transition: 0.3s ease-in-out;\n\n    &:hover {\n      color: ${cyan[8]};\n    }\n  }\n`;\n","import { createEntityAdapter, createSlice, EntityState, PayloadAction } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport { Game } from 'src/models';\nimport { GameEvent, GameEventType } from 'src/models/event';\nimport { Player } from 'src/models/player';\n\nexport const gameAdapter = createEntityAdapter<Game>();\n\nexport interface GameState extends EntityState<Game> {\n  total: number;\n}\n\nexport const gameInitialState: GameState = {\n  ...gameAdapter.getInitialState(),\n  total: 0,\n};\n\nexport const gameSlice = createSlice({\n  name: 'games',\n  initialState: gameInitialState,\n  reducers: {\n    addGame: (state: GameState, action: PayloadAction<Game>): void => {\n      gameAdapter.addOne(state, action.payload);\n    },\n    deleteGame: (state: GameState, action: PayloadAction<string>): void => {\n      gameAdapter.removeOne(state, action.payload);\n    },\n    addPlayer: (state: GameState, action: PayloadAction<{ game: Game; player: Player }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.team1.players.push(action.payload.player);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    deletePlayer: (state: GameState, action: PayloadAction<{ game: Game; playerKey: string }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      const playerProperties = action.payload.playerKey.split(':');\n      const player: Player = { name: playerProperties[0], number: parseInt(playerProperties[1], 10) };\n      game.team1.players = game.team1.players.filter((p) => player.name !== p.name && player.number !== p.number);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    incrementTeam1: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team1Score++;\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T1_SCORE_INCREMENT,\n        at: dayjs().format(),\n      });\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T1_SCORE_UPDATE,\n        value: game.sets[action.payload.set].team1Score,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    incrementTeam2: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team2Score++;\n      game.sets[action.payload.set].events.push({ type: GameEventType.T2_SCORE_INCREMENT, at: dayjs().format() });\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T2_SCORE_UPDATE,\n        value: game.sets[action.payload.set].team2Score,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    decrementTeam1: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team1Score--;\n      game.sets[action.payload.set].events.push({ type: GameEventType.T1_SCORE_DECREMENT, at: dayjs().format() });\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T1_SCORE_UPDATE,\n        value: game.sets[action.payload.set].team1Score,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    decrementTeam2: (state: GameState, action: PayloadAction<{ game: Game; set: number }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].team2Score--;\n      game.sets[action.payload.set].events.push({ type: GameEventType.T2_SCORE_DECREMENT, at: dayjs().format() });\n      game.sets[action.payload.set].events.push({\n        type: GameEventType.T2_SCORE_UPDATE,\n        value: game.sets[action.payload.set].team2Score,\n        at: dayjs().format(),\n      });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    addSet: (state: GameState, action: PayloadAction<Game>): void => {\n      const game = _.cloneDeep(action.payload);\n      game.sets.push({ team1Score: 0, team2Score: 0, events: [], at: dayjs().format() });\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n    addEvent: (state: GameState, action: PayloadAction<{ game: Game; set: number; event: GameEvent }>): void => {\n      const game = _.cloneDeep(action.payload.game);\n      game.sets[action.payload.set].events.push(action.payload.event);\n      gameAdapter.updateOne(state, { id: game.id, changes: game });\n    },\n  },\n});\n\nexport const {\n  addEvent,\n  addGame,\n  addPlayer,\n  addSet,\n  decrementTeam1,\n  decrementTeam2,\n  deleteGame,\n  deletePlayer,\n  incrementTeam1,\n  incrementTeam2,\n} = gameSlice.actions;\n","import { grey } from '@ant-design/colors';\nimport { Col, Row } from 'antd';\nimport dayjs from 'dayjs';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { ActionGrid } from 'src/components/ActionGrid';\nimport { colLayout, dateFormat } from 'src/components/App';\nimport { ScoreEditor } from 'src/components/ScoreEditor';\nimport { SetSelector } from 'src/components/SetSelector';\nimport { Topbar } from 'src/components/Topbar';\nimport { GameEvent } from 'src/models/event';\nimport { MAX_SCORE, MIN_SCORE } from 'src/models/game';\nimport { buildUrl, Urls } from 'src/routing';\nimport {\n  addEvent,\n  addSet,\n  decrementTeam1,\n  decrementTeam2,\n  incrementTeam1,\n  incrementTeam2,\n} from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nexport const Game = (): JSX.Element => {\n  const { id } = useParams();\n  const history = useHistory();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n  const dispatch = useDispatch();\n  const [set, setSet] = useState(game ? game.sets.length - 1 : 0);\n\n  const handleIncrementT1 = (): void => {\n    if (game.sets[set].team1Score < MAX_SCORE) {\n      dispatch(incrementTeam1({ game, set }));\n    }\n  };\n\n  const handleIncrementT2 = (): void => {\n    if (game.sets[set].team2Score < MAX_SCORE) {\n      dispatch(incrementTeam2({ game, set }));\n    }\n  };\n\n  const handleDecrementT1 = (): void => {\n    if (game.sets[set].team1Score > MIN_SCORE) {\n      dispatch(decrementTeam1({ game, set }));\n    }\n  };\n\n  const handleDecrementT2 = (): void => {\n    if (game.sets[set].team2Score > MIN_SCORE) {\n      dispatch(decrementTeam2({ game, set }));\n    }\n  };\n\n  const handleAddAction = (event: GameEvent): void => {\n    const value = { game, set, event } as any;\n    dispatch(addEvent(value));\n  };\n\n  return (\n    <>\n      <Topbar />\n\n      {game && (\n        <StyledGame>\n          <Row>\n            <Col className=\"date\">{dayjs(game.at).format(dateFormat)}</Col>\n            <Col className=\"setSelector\">\n              <SetSelector\n                game={game}\n                selectedSet={set}\n                onSetChanged={(set: number): any => setSet(set)}\n                onAddSet={(): any => dispatch(addSet(game))}\n              />\n            </Col>\n            <Col className=\"team-names\">\n              <span>{game.team1.name}</span>\n              <span>{game.team2.name}</span>\n            </Col>\n            <Col className=\"header\">\n              <ScoreEditor\n                t1Score={game.sets[set].team1Score}\n                t2Score={game.sets[set].team2Score}\n                onIncrementT1={handleIncrementT1}\n                onDecrementT1={handleDecrementT1}\n                onIncrementT2={handleIncrementT2}\n                onDecrementT2={handleDecrementT2}\n              />\n            </Col>\n            <Col className=\"actions\" {...colLayout}>\n              <div className=\"links\">\n                <button\n                  className=\"link team\"\n                  onClick={(): void =>\n                    history.push(buildUrl(Urls.TEAM_MANAGEMENT, [{ parameter: 'id', value: game.id }]))\n                  }\n                >\n                  Gérer mon équipe\n                </button>\n                <button\n                  className=\"link stats\"\n                  onClick={(): void => history.push(buildUrl(Urls.GAME_STATS, [{ parameter: 'id', value: game.id }]))}\n                >\n                  Statistiques\n                </button>\n              </div>\n              <ActionGrid team={game.team1.players} onAddAction={handleAddAction} />\n            </Col>\n          </Row>\n        </StyledGame>\n      )}\n    </>\n  );\n};\n\nconst StyledGame = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n\n  .date {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    font-size: 24px;\n  }\n\n  .setSelector {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    margin: 12px 0px;\n  }\n\n  .team-names {\n    display: flex;\n    width: 100%;\n\n    span {\n      font-size: 40px;\n      flex: 0 0 50%;\n      padding: 0 8px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      color: ${grey[5]};\n\n      &:nth-child(1) {\n        text-align: right;\n      }\n    }\n  }\n\n  .header {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n  }\n\n  .actions .links {\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    margin-top: 8px;\n    margin-bottom: 8px;\n\n    button {\n      margin: 4px;\n    }\n  }\n`;\n","import { blue, lime, red } from '@ant-design/colors';\nimport React from 'react';\nimport { Game } from 'src/models/game';\nimport styled from 'styled-components';\n\ninterface SetResultProps {\n  game: Game;\n}\n\nexport const SetResults: React.FC<SetResultProps> = (props: SetResultProps): JSX.Element => {\n  return (\n    <StyledSetResults>\n      {props.game.sets.map((set, index) => (\n        <span\n          key={index}\n          className={set.team1Score > set.team2Score ? 'won' : set.team1Score < set.team2Score ? 'lost' : ''}\n        >\n          {set.team1Score}•{set.team2Score}\n        </span>\n      ))}\n    </StyledSetResults>\n  );\n};\n\nconst StyledSetResults = styled.div`\n  display: flex;\n\n  span {\n    padding: 2px 4px;\n    margin-left: 4px;\n    border-radius: 4px;\n    text-align: center;\n    color: white;\n    font-weight: 700;\n    background-color: ${blue[4]};\n\n    &.won {\n      background-color: ${lime[7]};\n    }\n\n    &.lost {\n      background-color: ${red[6]};\n    }\n  }\n`;\n","/* eslint-disable react/display-name */\nimport { cyan, red } from '@ant-design/colors';\nimport { faChartLine, faFileExport, faSearch, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Popconfirm, Row, Table, Tooltip, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { colLayout, dateFormat } from 'src/components/App';\nimport { SetResults } from 'src/components/SetResults';\nimport { Topbar } from 'src/components/Topbar';\nimport { countEvents, displayName, Game, sortGames } from 'src/models/game';\nimport { buildUrl, Urls } from 'src/routing';\nimport { deleteGame } from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nconst { Title } = Typography;\n\nexport const GameList = (): JSX.Element => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const games = useSelector((state: RootState) => state.games.entities);\n\n  const columns = [\n    {\n      title: 'Date',\n      render: (game: Game): string => dayjs(game.at).format(dateFormat),\n      className: 'fit-content',\n      sorter: (game1: Game, game2: Game): number => (dayjs(game1.at).isBefore(game2.at) ? -1 : 1),\n    },\n    { title: 'Match', render: displayName, sorter: sortGames },\n    { title: 'Résultat', render: (game: Game): JSX.Element => <SetResults game={game} /> },\n    {\n      title: 'Evts',\n      sorter: (game1: Game, game2: Game): number => (countEvents(game1) > countEvents(game2) ? -1 : 1),\n      render: countEvents,\n    },\n    {\n      key: 'actions',\n      className: 'actions fit-content',\n      render: (game: Game): JSX.Element => (\n        <>\n          <Tooltip title=\"editer le score et les stats\">\n            <FontAwesomeIcon\n              icon={faSearch}\n              size=\"lg\"\n              onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n            />\n          </Tooltip>\n          <Tooltip title=\"visualiser les données du match\">\n            <FontAwesomeIcon\n              icon={faChartLine}\n              size=\"lg\"\n              onClick={(): void => history.push(buildUrl(Urls.GAME_STATS, [{ parameter: 'id', value: game.id }]))}\n            />\n          </Tooltip>\n          <Tooltip title=\"exporter les données du match\">\n            <FontAwesomeIcon\n              icon={faFileExport}\n              size=\"lg\"\n              onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n            />\n          </Tooltip>\n          <Tooltip title=\"supprimer le match\">\n            <Popconfirm\n              title={'sûr ?'}\n              onConfirm={(): any => dispatch(deleteGame(game.id))}\n              okText=\"Oui\"\n              cancelText=\"Non en fait\"\n            >\n              <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n            </Popconfirm>\n          </Tooltip>\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Topbar />\n\n      <StyledGameList>\n        <Row>\n          <Col {...colLayout}>\n            <Title level={2}>Matchs enregistrés sur ce navigateur</Title>\n            <Table\n              size=\"small\"\n              bordered={true}\n              dataSource={Object.values(games).map((game) => {\n                return { ...game, key: game.id };\n              })}\n              columns={columns}\n              pagination={false}\n            ></Table>\n          </Col>\n\n          <Col className=\"button\" {...colLayout}>\n            <Button size=\"large\" type=\"primary\" block onClick={(): void => history.push(Urls.NEW_GAME)}>\n              Nouveau match\n            </Button>\n          </Col>\n        </Row>\n      </StyledGameList>\n    </>\n  );\n};\n\nconst StyledGameList = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n\n  .actions {\n    svg {\n      cursor: pointer;\n      margin-right: 8px;\n      transition: 0.3s all;\n\n      &:hover {\n        color: ${cyan[8]};\n      }\n\n      &[data-icon='trash']:hover {\n        color: ${red[5]};\n      }\n    }\n  }\n\n  .fit-content {\n    width: 1%;\n    white-space: nowrap;\n  }\n\n  button {\n    margin-top: 16px;\n  }\n`;\n","import { cyan } from '@ant-design/colors';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport {\n  CartesianGrid,\n  Legend,\n  LegendType,\n  Line,\n  LineChart,\n  LineType,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { timeFormat } from 'src/components/App';\nimport { Game, GameEventType, GameSet } from 'src/models';\n\ninterface SetTimeChartProps {\n  game: Game;\n  set: GameSet;\n}\n\nexport const SetTimeChart: React.FC<SetTimeChartProps> = (props: SetTimeChartProps) => {\n  const t1Data = props.set.events\n    .filter((e) => e.type === GameEventType.T1_SCORE_UPDATE)\n    .map((e) => {\n      return { time: dayjs(e.at).valueOf(), value: e.value };\n    });\n\n  const scoreEvents = props.set.events.filter((e) =>\n    [GameEventType.T1_SCORE_UPDATE, GameEventType.T2_SCORE_UPDATE].includes(e.type)\n  );\n\n  const data = [];\n  let t1LastScore = 0;\n  let t2LastScore = 0;\n  scoreEvents.forEach((e) => {\n    t1LastScore = e.type === GameEventType.T1_SCORE_UPDATE ? e.value : t1LastScore;\n    t2LastScore = e.type === GameEventType.T2_SCORE_UPDATE ? e.value : t2LastScore;\n    data.push({ time: dayjs(e.at).valueOf(), t1Score: t1LastScore, t2Score: t2LastScore });\n  });\n\n  const lineProps = {\n    type: 'monotone' as LineType,\n    strokeWidth: 4,\n    activeDot: { r: 8 },\n    legendType: 'circle' as LegendType,\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"time\"\n          name=\"Temps\"\n          domain={[t1Data[0].time, t1Data[t1Data.length - 1].time]}\n          tickFormatter={(timestamp: number): string => dayjs(timestamp).format(timeFormat)}\n          type=\"number\"\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(timestamp: number): string => dayjs(timestamp).format(timeFormat)} />\n        <Legend />\n        <Line {...lineProps} dataKey=\"t1Score\" name={props.game.team1.name} stroke={cyan[9]} />\n        <Line {...lineProps} dataKey=\"t2Score\" name={props.game.team2.name} stroke={cyan[6]} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import { Col, Row, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { colLayout, dateFormat } from 'src/components/App';\nimport { SetTimeChart } from 'src/components/SetTimeChart';\nimport { Topbar } from 'src/components/Topbar';\nimport { duration } from 'src/models';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nconst { Title } = Typography;\n\nexport const GameStats = (): JSX.Element => {\n  const { id } = useParams();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n\n  return (\n    <>\n      <Topbar />\n      {game && (\n        <StyledGameStats>\n          <Row>\n            <Col {...colLayout}>\n              <Title level={2}>\n                {game.team1.name} vs {game.team2.name}, le {dayjs(game.at).format(dateFormat)}\n              </Title>\n            </Col>\n\n            <Col {...colLayout}>\n              {game.sets.map((set, index) => (\n                <React.Fragment key={index}>\n                  <Title level={4}>\n                    Set {index + 1} ({duration(set) + ' minutes'})\n                  </Title>\n                  <SetTimeChart game={game} set={set} />\n                </React.Fragment>\n              ))}\n            </Col>\n          </Row>\n        </StyledGameStats>\n      )}\n    </>\n  );\n};\n\nconst StyledGameStats = styled.div`\n  height: calc(100vh - 80px);\n  padding: 8px;\n`;\n","import { Button, Col, Row } from 'antd';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { Urls } from 'src/routing';\nimport styled from 'styled-components';\n\nexport const Home = (): JSX.Element => {\n  const history = useHistory();\n\n  return (\n    <>\n      <Topbar />\n      <StyledHome>\n        <Row>\n          <Col xs={{ span: 20, offset: 2 }} lg={{ span: 12, offset: 6 }}>\n            <Button block size=\"large\" type=\"primary\" onClick={(): void => history.push(Urls.NEW_GAME)}>\n              Nouveau match\n            </Button>\n            <Button block size=\"large\" type=\"primary\" onClick={(): void => history.push(Urls.GAME_LIST)}>\n              Matchs précédents\n            </Button>\n          </Col>\n        </Row>\n      </StyledHome>\n    </>\n  );\n};\n\nconst StyledHome = styled.div`\n  height: calc(100vh - 80px);\n\n  button {\n    font-size: 24px;\n    margin-top: 24px;\n    font-weight: bold;\n    height: 100px;\n  }\n`;\n","import { red } from '@ant-design/colors';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Form, Input, InputNumber, Row, Space, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { GameSet } from 'src/models/game';\nimport { Team } from 'src/models/team';\nimport { buildUrl, Urls } from 'src/routing';\nimport { addGame } from 'src/store/slices/gameSlice';\nimport styled from 'styled-components';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { colLayout } from './App';\n\nconst { Title } = Typography;\n\nexport const NewGame = (): JSX.Element => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const handleSubmit = (): void => {\n    const uuid = uuidv4();\n\n    let players = form.getFieldValue('players');\n    if (!players) {\n      players = [{ name: 'Tous', number: 0 }];\n    }\n\n    const team1: Team = {\n      name: form.getFieldValue('team1'),\n      players: players,\n    };\n\n    const team2: Team = {\n      name: form.getFieldValue('team2'),\n      players: [],\n    };\n\n    const sets: GameSet[] = [\n      {\n        team1Score: 0,\n        team2Score: 0,\n        events: [],\n        at: dayjs().format(),\n      },\n    ];\n\n    dispatch(addGame({ id: uuid, team1: team1, team2: team2, sets: sets, at: dayjs().format() }));\n    history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: uuid }]));\n  };\n\n  return (\n    <>\n      <Topbar />\n      <StyledNewGame>\n        <Row>\n          <Col {...colLayout}>\n            <Title level={2}>Nouveau match</Title>\n            <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n              <Form.Item\n                name=\"team1\"\n                label=\"Ton équipe\"\n                rules={[{ required: true, message: 'requis' }]}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.Item\n                name=\"team2\"\n                label=\"L'autre équipe\"\n                rules={[{ required: true, message: 'requis' }]}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input size=\"large\" />\n              </Form.Item>\n\n              <Form.List name=\"players\">\n                {(fields, { add, remove }): JSX.Element => {\n                  return (\n                    <div>\n                      {fields.map((field) => (\n                        <Space key={field.key} align=\"start\">\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'name']}\n                            fieldKey={[field.fieldKey, 'name']}\n                            rules={[{ required: true, message: 'requis' }]}\n                            label=\"Nom\"\n                          >\n                            <Input placeholder=\"nom du joueur\" size=\"large\" />\n                          </Form.Item>\n\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'number']}\n                            fieldKey={[field.fieldKey, 'number']}\n                            rules={[{ required: true, message: 'requis' }]}\n                            label=\"Numéro\"\n                          >\n                            <InputNumber min={0} step=\"1\" size=\"large\" />\n                          </Form.Item>\n\n                          {fields.length > 1 ? (\n                            <FontAwesomeIcon\n                              icon={faTrash}\n                              size=\"lg\"\n                              className=\"dynamic-delete-button\"\n                              onClick={(): void => remove(field.name)}\n                            />\n                          ) : null}\n                        </Space>\n                      ))}\n\n                      <Form.Item className=\"add-player\">\n                        <Button\n                          block\n                          type=\"dashed\"\n                          onClick={(): void => {\n                            add();\n                          }}\n                          size=\"large\"\n                        >\n                          <FontAwesomeIcon icon={faPlus} /> Ajouter un joueur\n                        </Button>\n                      </Form.Item>\n                    </div>\n                  );\n                }}\n              </Form.List>\n\n              <Form.Item>\n                <Button block type=\"primary\" htmlType=\"submit\" size=\"large\">\n                  OK\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </StyledNewGame>\n    </>\n  );\n};\n\nconst StyledNewGame = styled.div`\n  height: calc(100vh - 80px);\n  margin-top: 24px;\n\n  .ant-space {\n    display: flex;\n    width: 100%;\n\n    .ant-space-item:nth-child(1) {\n      width: 50%;\n    }\n\n    svg.fa-trash {\n      margin-top: 42px;\n      margin-left: 8px;\n      cursor: pointer;\n\n      &:hover {\n        color: ${red[6]};\n      }\n    }\n  }\n\n  .add-player svg.fa-plus {\n    margin-right: 8px;\n  }\n`;\n\nexport default NewGame;\n","/* eslint-disable react/display-name */\nimport { cyan, red } from '@ant-design/colors';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Col, Form, Input, InputNumber, message, Popconfirm, Row, Table, Tooltip, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Topbar } from 'src/components/Topbar';\nimport { Game } from 'src/models/game';\nimport { Player } from 'src/models/player';\nimport { buildUrl, Urls } from 'src/routing';\nimport { addPlayer, deletePlayer } from 'src/store/slices/gameSlice';\nimport { RootState } from 'src/store/store';\nimport styled from 'styled-components';\n\nimport { colLayout } from './App';\n\nconst { Title } = Typography;\n\ninterface TeamManagementProps {\n  game: Game;\n}\n\nexport const TeamManagement: React.FC<TeamManagementProps> = (): JSX.Element => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const game = useSelector((state: RootState) => state.games.entities[id]);\n  const [form] = Form.useForm();\n\n  const columns = [\n    { title: 'Nom', dataIndex: 'name', sorter: (a: Player, b: Player): number => a.name.localeCompare(b.name) },\n    { title: 'Numéro', dataIndex: 'number', sorter: (a: Player, b: Player): number => a.number - b.number },\n    {\n      key: 'actions',\n      className: 'actions fit-content',\n      render: (record: any): JSX.Element => (\n        <Tooltip key=\"delete\" title=\"supprimer cette personne\">\n          <Popconfirm\n            title={'sûr ?'}\n            onConfirm={(): any => dispatch(deletePlayer({ game: game, playerKey: record.key }))}\n            okText=\"Oui\"\n            cancelText=\"Non en fait\"\n          >\n            <FontAwesomeIcon icon={faTrash} />\n          </Popconfirm>\n        </Tooltip>\n      ),\n    },\n  ];\n\n  const handleAddPlayer = (player: Player): void => {\n    if (game.team1.players.some((p) => p.name === player.name && p.number === player.number)) {\n      message.error('Cette personne existe déjà');\n    } else {\n      dispatch(addPlayer({ game: game, player: player }));\n      form.resetFields();\n    }\n  };\n\n  return (\n    <>\n      <Topbar />\n\n      {game && (\n        <StyledTeamTable>\n          <Row>\n            <Col {...colLayout}>\n              <Title level={2}>Gérer mon équipe</Title>\n              <button\n                className=\"link\"\n                onClick={(): void => history.push(buildUrl(Urls.GAME, [{ parameter: 'id', value: game.id }]))}\n              >\n                Retour au match\n              </button>\n\n              <Table\n                size=\"small\"\n                bordered={true}\n                dataSource={game.team1.players.map((player) => {\n                  return { ...player, key: player.name + ':' + player.number };\n                })}\n                columns={columns}\n                pagination={false}\n              ></Table>\n\n              <Form form={form} layout=\"horizontal\" onFinish={handleAddPlayer}>\n                <Form.Item\n                  name=\"name\"\n                  label=\"Nom\"\n                  rules={[{ required: true, message: 'requis' }]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <Input placeholder=\"nouveau joueur\" />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"number\"\n                  label=\"Numéro\"\n                  rules={[{ required: true, message: 'requis' }]}\n                  validateTrigger={['onChange', 'onBlur']}\n                >\n                  <InputNumber />\n                </Form.Item>\n\n                <Form.Item className=\"button\">\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    OK\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Col>\n          </Row>\n        </StyledTeamTable>\n      )}\n    </>\n  );\n};\n\nconst StyledTeamTable = styled.div`\n  button.link {\n    margin-bottom: 16px;\n  }\n\n  form {\n    margin-top: 24px;\n    margin-bottom: 24px;\n  }\n\n  .fit-content {\n    width: 1%;\n    white-space: nowrap;\n  }\n\n  .actions {\n    svg {\n      transition: 0.3s all;\n      cursor: pointer;\n\n      &:hover {\n        color: ${cyan[8]};\n      }\n\n      &[data-icon='trash']:hover {\n      color: ${red[5]};\n    }\n  }\n\n  .button .ant-form-item-control-input-content {\n    text-align: right;\n  }\n`;\n","import { Game } from 'src/components/Game';\nimport { GameList } from 'src/components/GameList';\nimport { GameStats } from 'src/components/GameStats';\nimport { Home } from 'src/components/Home';\nimport { NewGame } from 'src/components/NewGame';\nimport { TeamManagement } from 'src/components/TeamManagement';\n\nexport interface RouteConfig {\n  path: string;\n  exact?: boolean;\n  component?: any;\n  redirectTo?: string;\n  routes?: RouteConfig[];\n}\n\nexport interface MenuElement {\n  path?: string;\n  textKey?: string;\n  icon?: JSX.Element;\n  weight?: number;\n  children?: MenuElement[];\n}\n\nexport const Urls = {\n  HOME: process.env.PUBLIC_URL + '/home',\n  NEW_GAME: process.env.PUBLIC_URL + '/new-game',\n  GAME_LIST: process.env.PUBLIC_URL + '/game-list',\n  GAME: process.env.PUBLIC_URL + '/game/:id',\n  GAME_STATS: process.env.PUBLIC_URL + '/game/:id/stats',\n  TEAM_MANAGEMENT: process.env.PUBLIC_URL + '/game/:id/team',\n  DEFAULT: process.env.PUBLIC_URL + '/:anything_else',\n};\n\nexport const routes: RouteConfig[] = [\n  {\n    path: Urls.HOME,\n    exact: true,\n    component: Home,\n  },\n  {\n    path: Urls.NEW_GAME,\n    exact: true,\n    component: NewGame,\n  },\n  {\n    path: Urls.GAME,\n    exact: true,\n    component: Game,\n  },\n  {\n    path: Urls.GAME_LIST,\n    exact: true,\n    component: GameList,\n  },\n  {\n    path: Urls.GAME_STATS,\n    exact: true,\n    component: GameStats,\n  },\n  {\n    path: Urls.TEAM_MANAGEMENT,\n    exact: true,\n    component: TeamManagement,\n  },\n  {\n    path: Urls.DEFAULT,\n    redirectTo: Urls.HOME,\n  },\n  {\n    path: '',\n    exact: true,\n    redirectTo: Urls.HOME,\n  },\n];\n\ninterface UrlParameter {\n  parameter: string;\n  value: any;\n}\n\nexport const buildUrl = (base: string, parameters: UrlParameter[]): string => {\n  parameters.map((param: UrlParameter) => {\n    base = base.replace(':' + param.parameter, param.value.toString());\n    return null;\n  });\n\n  return base;\n};\n","import React from 'react';\nimport { Redirect, Route, SwitchProps } from 'react-router-dom';\nimport { RouteConfig } from 'src/routing';\n\nexport const RouteAndSubRoute: React.FC<SwitchProps & RouteConfig> = (route) => {\n  if (route.redirectTo) {\n    return <Route path={route.path} render={(): any => <Redirect to={route.redirectTo as string} />} />;\n  }\n\n  return <Route path={route.path} render={(props: any): any => <route.component {...props} routes={route.routes} />} />;\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { RouteAndSubRoute, routes } from 'src/routing';\n\nexport const colLayout = { xs: { span: 22, offset: 1 }, md: { span: 18, offset: 3 }, lg: { span: 16, offset: 4 } };\nexport const timeFormat = 'HH[h]mm';\nexport const dateFormat = 'DD/MM/YYYY';\n\nexport const App = (): JSX.Element => {\n  return (\n    <Router>\n      <Switch>\n        {routes.map((route, index) => (\n          <RouteAndSubRoute key={index} {...route} />\n        ))}\n      </Switch>\n    </Router>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport storage from 'redux-persist/lib/storage';\n\nimport { gameSlice } from './slices/gameSlice';\n\nconst rootReducer = combineReducers({ games: gameSlice.reducer });\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst persistConfig = {\n  key: 'gkState',\n  storage: storage,\n  whitelist: ['games'],\n  stateReconciler: autoMergeLevel2,\n};\n\nconst pReducer = persistReducer<RootState>(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: pReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n","import './styles/reset.css';\nimport 'antd/dist/antd.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport { App } from 'src/components/App';\nimport * as serviceWorker from 'src/serviceWorker';\nimport { persistor, store } from 'src/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}